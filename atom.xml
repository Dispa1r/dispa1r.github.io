<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DravenLu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dispa1r.github.io/"/>
  <updated>2023-02-27T08:31:37.139Z</updated>
  <id>https://dispa1r.github.io/</id>
  
  <author>
    <name>Dispa1r</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Falco全解析(一)</title>
    <link href="https://dispa1r.github.io/2023/02/27/Falco%E5%85%A8%E8%A7%A3%E6%9E%90-%E4%B8%80/"/>
    <id>https://dispa1r.github.io/2023/02/27/Falco全解析-一/</id>
    <published>2023-02-27T08:29:20.000Z</published>
    <updated>2023-02-27T08:31:37.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Falco全解析-一"><a href="#Falco全解析-一" class="headerlink" title="Falco全解析(一)"></a>Falco全解析(一)</h1><h2 id="Falco能做什么"><a href="#Falco能做什么" class="headerlink" title="Falco能做什么"></a>Falco能做什么</h2><p><code>Falco</code>主要通过系统调用去加固和监视系统</p><ul><li>解析来自内核的系统调用</li><li>强大的规则引擎判断系统调用是否安全</li><li>当发现非法系统调用时发出警告</li></ul><h2 id="Falco架构"><a href="#Falco架构" class="headerlink" title="Falco架构"></a>Falco架构</h2><p><img src="https://hackmd.summershrimp.com/uploads/upload_f68eda819f130fbb193b35da3c5d0aa2.png" alt=""></p><p>从最底层开始介绍,<code>Falco</code>最底层是由<code>LSM</code>和<code>ebpf</code>驱动的一个<code>monitor</code>,他会捕捉全部的系统调用并且传输至引擎中判断,引擎也就是<code>libsinsp</code>和<code>libscap</code>,最后引擎使用<code>GRP</code>C或者其他通信方式发送出去,算是比较常规的架构(内核获取信息+用户态引擎判断+网络传输结果)</p><p>我对这部分ebpf的代码比较感兴趣,内核部分的代码在<a href="https://github.com/falcosecurity/libs">这里</a>可以找到,同时引擎的代码也在这个仓库中,有意思的一点是现在<a href="https://github.com/draios/sysdig">sysdig</a>的内核探针也是用的是Falco的,然而Falco是捐赠给CNCF的开源项目</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>Falco</code>有直接可以运行的binary文件,因此可以直接执行<code>falco</code>,也可以使用官方提供的<code>Falco</code> Docker镜像运行,官方更推荐使用特权模式运行:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker pull falcosecurity/falco-driver-loader:latest</span><br><span class="line">docker run --rm -i -t \</span><br><span class="line">    --privileged \</span><br><span class="line">    -v /root/.falco:/root/.falco \</span><br><span class="line">    -v /proc:/host/proc:ro \</span><br><span class="line">    -v /boot:/host/boot:ro \</span><br><span class="line">    -v /lib/modules:/host/lib/modules \</span><br><span class="line">    -v /usr:/host/usr:ro \</span><br><span class="line">    -v /etc:/host/etc:ro \</span><br><span class="line">    falcosecurity/falco-driver-loader:latest</span><br></pre></td></tr></table></figure></p><p>我这里由于后期有打算进行二次开发,因此选择自己编译后运行二进制文件,我的环境如下:宿主机 M1 mac,虚拟机使用的是<code>MultiPass</code>,<code>ubuntu 22.10</code>发行版,内核版本<code>5.15.0-60-generic</code>,因为之前已经在这个虚拟机中测试过ebpf,所以说我可以直接编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/falcosecurity/falco.git</span><br><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line">cmake ..</span><br><span class="line">make (falco/bpf/driver/libscap等,这里选择你想要编译的组建)</span><br></pre></td></tr></table></figure><p>一路也比较顺利,编译之后在<code>/build/driver</code>可以看见你编译出的.ko后缀的驱动和.o后缀的<code>BTF</code>文件,内核可以直接加载并运行,编译整个<code>Falco</code>消耗的时间还是比较长因为他会编译所用到的所有依赖(而且是边下载边编译)…耐心等待即,编译时还出现了compiler被莫名其妙terminate的情况,给<code>MulitPass</code>加了点内存之后总算可以编译成功了</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_d41796f9dd6d98f01d3f2f6fbdbd0cb4.png" alt=""></p><p>直接运行binary其实坑挺多的,需要你首先使用<code>falco-driver-loader</code>去加载驱动或者ebpf,然后再补充rules和配置文件之后才可以运行,更方便的还是使用docker去运行,<code>Falco</code>既可以运行在容器中,也可以运行在宿主机上,一般来说<code>Falco</code>在k8s中以<code>DaemonSet</code>的形式运行在每一台Node上</p><p>再补充一点坑的地方,从官方仓库下载好的预编译好的probe.o文件是专门为pagesize=64k的linux内核编译的,所以我的并不能加载普通的bpf文件,但是我后来试了一下modern(也就是开启了BTF支持的,当然这里要求内核版本大于5.8),modern BPF不仅实现了CO—RE,并且使用ring buffer取代了perf map算是有了性能提升,可以看一下运行falco之后使用bpftool查看,一下子多了两百多个程序…</p><p> <img src="https://hackmd.summershrimp.com/uploads/upload_3c57d75e38699fe7be8b3506ccf6cbfd.png" alt=""></p><p>还有一个坑记录一下:<code>MultiPass默认</code>是给了单个cpu,想要使用Ring Buffer的话必须CPU数量在2以上,所以需要改一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multipass set local.spruce-bluejay.cpus=4</span><br></pre></td></tr></table></figure><h2 id="libs代码解析"><a href="#libs代码解析" class="headerlink" title="libs代码解析"></a>libs代码解析</h2><p>libs仓库中的架构图更详细一些</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_fa390a63529311d3b2c80d805e758fcc.png" alt=""></p><p>libs仓库中的文件分布如下</p><ul><li><code>drivers</code>目录包含了全部内核层的东西,也就是驱动和<code>ebpf</code>程序,这部分程序主要监视和捕获内核</li><li><code>userspace</code>目录则是包含了用户态的东西,<code>libscap</code>(library for system capture)主要负责直接与驱动交互,控制内核层的事件抓取,同时会捕捉文件打开与关闭的情况,并且实现了操作系统状态收集,最后把这些事件全部发送至libinsp中;<code>libsinsp</code>(library for system inspection)主要负责对发送来的事件进行一些简单的过滤,并且解析过滤后的事件,并且对输出结果做一些格式化</li></ul><h2 id="ebpf部分"><a href="#ebpf部分" class="headerlink" title="ebpf部分"></a>ebpf部分</h2><p>入口是<code>probe.c</code>,这里是主要挂载了ebpf跟踪点的地方,传统的ebpf部分在nsfocus中已经有比较详细的讲解,下一篇中主要分析modern和传统ebpf的实现和改造</p><h2 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h2><ul><li><a href="https://falco.org/docs/getting-started">https://falco.org/docs/getting-started</a></li><li><a href="http://blog.nsfocus.net/falco-ebpf/">http://blog.nsfocus.net/falco-ebpf/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Falco全解析-一&quot;&gt;&lt;a href=&quot;#Falco全解析-一&quot; class=&quot;headerlink&quot; title=&quot;Falco全解析(一)&quot;&gt;&lt;/a&gt;Falco全解析(一)&lt;/h1&gt;&lt;h2 id=&quot;Falco能做什么&quot;&gt;&lt;a href=&quot;#Falco能做什么&quot;
      
    
    </summary>
    
    
      <category term="Falco" scheme="https://dispa1r.github.io/tags/Falco/"/>
    
      <category term="ebpf" scheme="https://dispa1r.github.io/tags/ebpf/"/>
    
  </entry>
  
  <entry>
    <title>寒假学习笔记</title>
    <link href="https://dispa1r.github.io/2023/02/27/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://dispa1r.github.io/2023/02/27/寒假学习笔记/</id>
    <published>2023-02-27T03:21:01.000Z</published>
    <updated>2023-02-27T03:23:51.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Daily-Hacking"><a href="#Daily-Hacking" class="headerlink" title="Daily Hacking"></a>Daily Hacking</h1><h2 id="1-11"><a href="#1-11" class="headerlink" title="1.11"></a>1.11</h2><ul><li>看了一集脱壳王,主要讲了编译AOSP8.0的一些注意点</li><li>k8s: Pod产生的原因是因为容器之间的超亲密关系,解决成组调度的问题,以及容器设计模式这一重要概念,为了避免容器之间的依赖关系,使用Infra容器创建namespace. </li><li>在使用<code>minikube</code>进行实验的过程中,尽管使用<code>minikube</code>启动了一个pod,但是使用<code>docker ps -a</code>查看发现只有一个<code>kicbase</code>容器在运行,这是<code>docker in docker</code>吗,<code>docker in docker</code>的namespace之间的层级关系又是什么样子的呢,之前文章中有提到会有隐患,会有什么样的隐患呢</li></ul><p><img src="/uploads/upload_030f2778c483e7ac42e48358a2f9fb50.png" alt=""></p><ul><li>每日一道LeetCode题目</li></ul><h2 id="1-12"><a href="#1-12" class="headerlink" title="1.12"></a>1.12</h2><ul><li>整了一下论文评阅书,送明审</li><li>LeetCode每日一题</li><li>继续学习k8s,主要学<code>projected volume</code>,里面的serect(加密信息,保存在etcd中)、configmap(配置信息,通常为k-v对)、downloader api(用户获取pod相关信息,但是只能获取pre-set的),使用<code>kubectl describe pod</code>指令可以获取到Pod的相关信息,包括container等,events也是在这里查</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">➜  KubeMiniTest kubectl describe pod nginx</span><br><span class="line">Name:         nginx</span><br><span class="line">Namespace:    default</span><br><span class="line">Priority:     0</span><br><span class="line">Node:         minikube/192.168.49.2</span><br><span class="line">Start Time:   Thu, 12 Jan 2023 15:22:37 +0800</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Status:       Running</span><br><span class="line">IP:           172.17.0.3</span><br><span class="line">IPs:</span><br><span class="line">  IP:  172.17.0.3</span><br><span class="line">Containers:</span><br><span class="line">  nginx:</span><br><span class="line">    Container ID:   docker://562a88d939067fbcc12825747dee6b7f6eba86a912707e1a43bd9d0ca9d8a41e</span><br><span class="line">    Image:          nginx</span><br><span class="line">    Image ID:       docker-pullable://nginx@sha256:4b2e2e4192a2d9fc83c8eb57b070b89307be48a840db6dc50476f852d1768ba5</span><br><span class="line">    Port:           &lt;none&gt;</span><br><span class="line">    Host Port:      &lt;none&gt;</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Thu, 12 Jan 2023 15:22:44 +0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">    # ServiceAccountToken,一种特殊的project volume,保存了用户的权限信息,与api server进行通信</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-8lr45 (ro)</span><br><span class="line">  shell:</span><br><span class="line">    Container ID:   docker://55afb47508293a0476eca8d96a3f3be3bf94c9707b654ce8b10fa454bf9b0604</span><br><span class="line">    Image:          busybox</span><br><span class="line">    Image ID:       docker-pullable://busybox@sha256:7b3ccabffc97de872a30dfd234fd972a66d247c8cfc69b0550f276481852627c</span><br><span class="line">    Port:           &lt;none&gt;</span><br><span class="line">    Host Port:      &lt;none&gt;</span><br><span class="line">    State:          Running</span><br><span class="line">      Started:      Thu, 12 Jan 2023 15:22:49 +0800</span><br><span class="line">    Ready:          True</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-8lr45 (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             True</span><br><span class="line">  ContainersReady   True</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  kube-api-access-8lr45:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             true</span><br><span class="line">QoS Class:                   BestEffort</span><br><span class="line">Node-Selectors:              &lt;none&gt;</span><br><span class="line">Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s</span><br><span class="line">                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  48s   default-scheduler  Successfully assigned default/nginx to minikube</span><br><span class="line">  Normal  Pulling    47s   kubelet            Pulling image &quot;nginx&quot;</span><br><span class="line">  Normal  Pulled     42s   kubelet            Successfully pulled image &quot;nginx&quot; in 5.730802878s</span><br><span class="line">  Normal  Created    41s   kubelet            Created container nginx</span><br><span class="line">  Normal  Started    41s   kubelet            Started container nginx</span><br><span class="line">  Normal  Pulling    41s   kubelet            Pulling image &quot;busybox&quot;</span><br><span class="line">  Normal  Pulled     36s   kubelet            Successfully pulled image &quot;busybox&quot; in 5.573148627s</span><br><span class="line">  Normal  Created    36s   kubelet            Created container shell</span><br><span class="line">  Normal  Started    36s   kubelet            Started container shell</span><br></pre></td></tr></table></figure><ul><li><p>service account证书存放地点:<br><img src="https://hackmd.summershrimp.com/uploads/upload_73df03d7394413873b207ed19541292f.png" alt=""></p></li><li><p>使用liveness code代替容器的status来判断当前pod的运行状态是最重要的手段之一</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Type     Reason     Age                From               Message</span><br><span class="line">----     ------     ----               ----               -------</span><br><span class="line">Normal   Scheduled  99s                default-scheduler  Successfully assigned default/test-liveness-exec to minikube</span><br><span class="line">Normal   Pulled     95s                kubelet            Successfully pulled image &quot;busybox&quot; in 3.324897543s</span><br><span class="line">Warning  Unhealthy  54s (x3 over 64s)  kubelet            Liveness probe failed: cat: can&#x27;t open &#x27;/tmp/healthy&#x27;: No such file or directory</span><br><span class="line">Normal   Killing    54s                kubelet            Container liveness failed liveness probe, will be restarted</span><br><span class="line">Normal   Pulling    24s (x2 over 98s)  kubelet            Pulling image &quot;busybox&quot;</span><br><span class="line">Normal   Created    14s (x2 over 95s)  kubelet            Created container liveness</span><br><span class="line">Normal   Started    14s (x2 over 95s)  kubelet            Started container liveness</span><br><span class="line">Normal   Pulled     14s                kubelet            Successfully pulled image &quot;busybox&quot; in 9.336729588s</span><br></pre></td></tr></table></figure><ul><li>PodPreset用于批量化的对pod的配置文件添加一些预设置好的字段,比如说通过match lable去给某种指定功能的pod添加环境变量</li></ul><h2 id="1-13"><a href="#1-13" class="headerlink" title="1.13"></a>1.13</h2><ul><li>k8s一讲:今天主要学的是容器编排,这一功能是由k8s的controller实现的,对应目录为<code>kubernetes/pkg/controller/</code>,k8s的控制循环的模式为控制循环,实际状态调整为期望状态,deployment也会创建容器,中途出现了</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_ebca8d6f2e361a0937145373bed87a67.png" alt=""></p><ul><li><p>Deployment 创建 ReplicaSet, ReplicaSet创建pod, 提供了水平扩容功能,每次进行delpoyment的更新都会创建新的replica对象,replica对象会带有hash,如果不想创建过多replica对象,那就先pause,修改后再resume,spec.revisionHistoryLimit可以控制历史replicaSet的数量</p></li><li><p>leetcode今天和昨天的每日一题</p></li></ul><h2 id="1-15"><a href="#1-15" class="headerlink" title="1.15"></a>1.15</h2><ul><li><p>凌晨脑子有点乱,理解了好久才彻底弄懂了最大公约数那题,首先用hashmap对数组里的数字进行存在性处理,这题主要巧妙在不暴力遍历全部子序列,而是从公约数开始便利,公约数一定是1到max,然后对筛选出合法的,这里由于并不是要找到某个具体的值,所以不能用二分查找,查找的依据是,找到这个数所有的倍数在数组中命中的,以3为例,数组中可能命中6,18,这个时候gcd是6不是3,因此需要进行判断,初始gcd设置为0,第一次命中后设置为命中后的值,如果不是0,则更新为gcd(j,tmpGcd),判断是否等于遍历的那个,一旦有一个gcd等于当前这个,说明存在子序列里,立马break,继续下一个数,以4,6,10为例,2的时候,找到4了就立马退出,3找到6了立马退出,给我的启发是:一个纬度的遍历复杂度过高时,可以考虑从另一个维度遍历</p></li><li><p>今天每日一题是一个easy,轻松秒掉</p></li><li><p>今日k8s: StatefulSet,主要用于解决有状态的容器编排关系,主要有两种关系,拓扑关系(主从之类的,这部分可以在yaml中设置InitContainer实现?),存储关系(例如分布式数据库,需要保证掉线的结点重新上线后存储的一致性), 有两种方法访问到Pod,一种是通过VIP,直接在service的yaml文件中定义代理的虚拟IP,另一种则是通过DNS,不定义clusterIP,通过唯一身份标识去访问Pod,</p></li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_192d8755c060dcd3495c9cdcac2d18a8.png" alt=""></p><ul><li>查询DNS访问,statefulSet用于严格保证pod按照一定的顺序启动,这里有个问题,比如说 statefulSet可以用于解决主从之类的拓扑关系,可是他只能保证pod的启动顺序,这里怎么保证是主节点先启动,而不是从节点先启动?难道说是先有启动顺序,然后再去编号不同的Pod里执行脚本,完成主从的配置嘛?归根到底也就是一个现有顺序还是先有主从这一拓扑关系的问题(因为我之前用docker手动配置过mysql的主从集群,两个容器配置差别很大,假设用replica这个参数启动的容器肯定是一模一样的,这种情况是不是只能等启动一样的镜像之后再去配置主从关系)(已解决,查了下用k8s部署主从集群的情况,用configmap存储主从的配置信息,用initContainer确定启动顺序,用statefulSet动态保障启动顺序)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- bash</span><br><span class="line">      - &quot;-c&quot;</span><br><span class="line">      - |</span><br><span class="line">        set -ex</span><br><span class="line">         # 从 Pod 的序号，生成 server-id</span><br><span class="line">         [[ `hostname` =~ -([0-9]+)$ ]] || exit 1</span><br><span class="line">        ordinal=$&#123;BASH_REMATCH[1]&#125;</span><br><span class="line">        echo [mysqld] &gt; mnt/conf.d/server-id.cnf</span><br><span class="line">         # 由于 server-id=0 有特殊含义，我们给 ID 加 100 来避开 0</span><br><span class="line">        echo server-id=$((100 + $ordinal)) &gt;&gt; mnt/conf.d/server-id.cnf</span><br><span class="line">         # 如果Pod序号是0，说明它是Master节点，拷贝 master 配置</span><br><span class="line">         # 否则，拷贝 Slave 的配置</span><br><span class="line">        if [[ $ordinal -eq 0 ]]; then</span><br><span class="line">          cp mnt/config-map/master.cnf mnt/conf.d/</span><br><span class="line">        else</span><br><span class="line">          cp mnt/config-map/slave.cnf mnt/conf.d/</span><br><span class="line">        fi</span><br></pre></td></tr></table></figure><p><img src="https://hackmd.summershrimp.com/uploads/upload_12d473feddca4678aaea646c1138344e.png" alt=""></p><h2 id="1-16"><a href="#1-16" class="headerlink" title="1.16"></a>1.16</h2><ul><li>LeetCode每日一题,今天是一道双指针,还行</li><li>想了下之前理解的有问题,InitContainer是用来保证一个Pod内部容器启动顺序的字段,StatefulSet则是作用于Pod的编排中,两者并不在一个层级,之前理解的有问题</li><li><p>敏捷开发:当前最流行的敏捷框架 Scrum,学习了当前互联网产品的开发流程,学习了在编码开发过程中需要遵循的规范,编码规范、接口设计规范、版本控制规范、日志规范等,这是十年前流行的Git Flow工作流,但是随着敏捷开发的流行现在使用更多的是Github Flow工作流,仓库管理者创建仓库,开发者fork并且提pr,最后合并分支,其中commit信息以及pr信息都需要合理的规范</p></li><li><p>Master 分支：作为唯一一个正式对外发布的分支，是所有分支里最稳定的。 * Develop 分支：是根据 Master 分支创建出来的。Develop 分支作为一种集成分支 (Integration Branch)，专门用来集成已经开发完的各种特性。</p></li><li>Feature 分支：根据 Develop 分支创建出来。Gitflow 工作流里的每个新特性都有自己的 Feature 分支。当特性开发结束以后，这些分支上的工作会被合并到 Develop 分支。</li><li>Release 分支：当积累了足够多的已完成特性，或者预定的系统发布周期临近的时候，我们就会从 Develop 分支创建出一个 Release 分支，专门做和当前版本发布有关的工作。Release 分支一旦创建，就不允许再有新的特性被加入到这个分支了，只有修复 Bug 或者编辑文档之类的工作才能够进入该分支。Release 分支上的内容最终会被合并到 Master 分支。</li><li>Hotfix 分支：直接根据 Master 分支创建，目的是给运行在生产环境中的系统快速提供补丁。当 Hotfix 分支上的工作完成以后，可以合并到 Master 分支、Develop 分支以及当前的 Release 分支。如果有版本的更新，也可以为 Master 分支打上相应的 Tag。</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_6a14ffd3bfca7045ebcb3c353b699bd8.png" alt=""></p><ul><li><p>反爬虫手段: IP 校验、HTTP Header 校验、验证码、登陆限制、CSS 数据伪装、sign 参数签名等</p></li><li><p>看了golang的高并发网络编程,也就是协程+IO多路复用,epoll的技术忘的差不多了,从底层重新补一下,sokcet其实代表的是一个连接,CPU收到来自于该连接的数据包之后则会讲数据包的端口号拷贝到内存中对应socket的缓冲区中,这个过程中会有一次中断(此时数据仍然是在内核态的,用户进程使用还需要进行一次复制,而ebpf这种技术的初衷,正是为了减少拷贝无效数据包而对数据包进行伯克利过滤)</p></li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_6960db34cc3ccc599da983cd977bf3a8.png" alt=""></p><ul><li>select是最早用于监视多个socket是否有数据返回的方法,假设一个程序创建了大量连接,则内核需要监视多个socket判断哪个socket来了数据,缺点明显:1 要把所有的socket传给内核 2 两次遍历,每次调用select都需要将进程加入到所有监视socket的等待队列，每次唤醒都需要从每个队列中移除。这里涉及了两次遍历,epoll的设计初衷就是为了减少遍历的次数</li></ul><ul><li>epoll技术等于说将唤醒进程与socket就绪的进程解藕,核心数据结构有等待队列、rbr、rdlist(就绪队列),通过rdlist可以让被唤醒的进程快速知道哪个socket就绪了,减少了一次遍历,rbr用于维护当前监视的socket</li></ul><ul><li>今日k8s: statefulSet的rollUpdate顺序是按照编号的相反顺序,如果想要实现金丝雀发布(批量发布),可以设置partitin字段,DameonSet即守护进程,这个会确保每个Node上都有且只有一个被DameonSet管理的Pod,并且可以在整个集群启动之前启动(得益于Toleration功能,即无视被标有污点的Node)</li></ul><ul><li>至此，通过上面这些内容，你应该能够明白，DaemonSet 其实是一个非常简单的控制器。在它的控制循环中，只需要遍历所有节点，然后根据节点上是否有被管理 Pod 的情况，来决定是否要创建或者删除一个 Pod。只不过，在创建每个 Pod 的时候，DaemonSet 会自动给这个 Pod 加上一个 nodeAffinity，从而保证这个 Pod 只会在指定节点上启动。同时，它还会自动给这个 Pod 加上一个 Toleration，从而忽略节点的 unschedulable“污点”。</li></ul><ul><li>关于DaemonSet的版本管理,使用的是ControllerRevision,但是Deployment由于有ReplicaSet这一中间层的缘故,并没有使用这个进行版本管理</li></ul><h2 id="1-17"><a href="#1-17" class="headerlink" title="1.17"></a>1.17</h2><ul><li>Leetcode每日一题,两数之和变种题轻松秒</li></ul><h2 id="1-27"><a href="#1-27" class="headerlink" title="1.27"></a>1.27</h2><ul><li>leetcode每日一题</li><li>在k8s中任务分为两种,Long Running Service(LRS)与Job,Job是指运行后退出的工作,其次，Job Controller 在控制循环中进行的调谐（Reconcile）操作，是根据实际在 Running 状态 Pod 的数目、已经成功退出的 Pod 的数目，以及 parallelism、completions 参数的值共同计算出在这个周期里，应该创建或者删除的 Pod 数目，然后调用 Kubernetes API 来执行这个操作。</li><li><p>三种常用使用模式,一种是通过模版+外部控制器修改,编辑文件后创建job,这种比较常用,但是parallelism和completions应该设置为1,并行度应该由外部控制器决定,比如说多创建几次job?管理器多个job的话可以通过统一的label</p></li><li><p>普通的job控制器只可以控制job之前不存在状态的情况,如果做批量计算(比如说下一批的计算需要用到上一批计算的结果),这种情况需要使用operaotr+job</p></li><li><p>cronjob就是定时任务,通过cronjob可以指定一些特殊情况,比如说旧的没运行完成新的又要创建这种,cronjob控制器用于控制job对象,使用对象控制另一种对象是k8s的精髓</p></li><li><p>docker既可以使用宿主机的网络(类似于虚拟机的NAT),也可以创建自己的network namespace,拥有自己的ip和端口,docker容器之间的相互通信是借由于创建在宿主机上的虚拟网桥docker0实现的,容器通过veth虚拟出的两张网卡接入网桥,一个veth在docker中,一个在宿主机里</p></li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_85d860095de5d51f8d7245edcdad73ca.png" alt=""></p><ul><li>容器的跨主通信万变不离其宗,还是创建一个公用的虚拟网桥取代docker0<br><img src="https://hackmd.summershrimp.com/uploads/upload_e5833fe5d62734cd87d1abb8c50bde12.png" alt=""></li></ul><h2 id="1-30"><a href="#1-30" class="headerlink" title="1.30"></a>1.30</h2><ul><li><p>Leetcode每日一题</p></li><li><p>跨主机通信的项目以flannel为例,是通过创建tunnel在内核捕获到网络数据包之后发送至应用态的flannel进程,最后在应用层转发至flannel子网中对应的node上,这个子网和node的对应关系保存在etcd中,udp模式通过监听8825端口实现数据包的传递,性能差的原因是内核与应用之间的数据包拷贝次数过多(不得不再cue一下ebpf),因此在性能优化时,尽量把逻辑放在内核</p></li><li><p>不使用udp模式使用vxlan模式的好处是网络数据包拷贝次数减少,用的是vtep虚拟网络隧道,vtep的用途和flanneld类似,只不过他在内核里处理数据包,处在二层网络,包装的是frame,其中对方vtep设备的mac地址不通过arp学习得到,而是一个node加入网络后直接由插件添加至路由规则中,所以说其实就是除了vtep层的包是要特殊处理的(不知道目标vtep的ip和mac),这部分用ebpf实现就行,找到了一个想法和我一样的:<a href="https://zhuanlan.zhihu.com/p/565254116">https://zhuanlan.zhihu.com/p/565254116</a></p></li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_68ba0388e81f8d205e2fe65a9ce70afd.png" alt=""></p><h2 id="1-31"><a href="#1-31" class="headerlink" title="1.31"></a>1.31</h2><ul><li>弄了好久ebpf环境，记录一下：</li><li>wget -c <a href="https://dl.google.com/go/go1.19.2.linux-amd64.tar.gz">https://dl.google.com/go/go1.19.2.linux-amd64.tar.gz</a> -O - | sudo tar -xz -C /usr/local</li><li>vim /etc/profile</li><li>export PATH=$PATH:/usr/local/go/bin</li><li>export GO111MODULE=on<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">bpf &quot;github.com/iovisor/gobpf/bcc&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">import &quot;C&quot;</span><br><span class="line"></span><br><span class="line">const source string = `</span><br><span class="line">int kprobe__do_sys_open(void *ctx) </span><br><span class="line">&#123; </span><br><span class="line">bpf_trace_printk(&quot;Hello, World!\\n&quot;); </span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">m := bpf.NewModule(source, []string&#123;&#125;)</span><br><span class="line">defer m.Close()</span><br><span class="line"></span><br><span class="line">kp, err := m.LoadKprobe(&quot;kprobe__do_sys_open&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;Failed to load kprobe count: %s\n&quot;, err)</span><br><span class="line">os.Exit(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = m.AttachKprobe(&quot;do_sys_open&quot;, kp, -1)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;Failed to attach kprobe to strlen: %s\n&quot;, err)</span><br><span class="line">os.Exit(1)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  for &#123;</span><br><span class="line">fmt.Println(&quot;waiting...&quot;)</span><br><span class="line">time.Sleep(time.Second * 10)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h2><ul><li>k8s启动一个pod后第一步就是为infra containner配置网络栈,CNI插件本质上是一些二进制文件,这些二进制文件只需要负责配置网络,并且返回给dockershim IP地址就行,这个 ADD 和 DEL 操作，就是 CNI 插件唯一需要实现的两个方法。</li></ul><ul><li>kubelet 创建 Pod -&gt;创建 Infra 容器。主要是由（CRI）<strong>dockershim </strong>调用 Docker API 创建并启动 Infra 容器-&gt; SetUpPod方法。方法的作用是：1.为 CNI 插件准备参数，2.然后调用 CNI 插件为 Infra 容器配置网络。</li></ul><ul><li>1.所需参数-&gt;实现ADD/DEL方法-&gt;CNI插件（<em>flannel插件</em>)实现。：</li><li>1.1参数一：由 dockershim 设置的一组 CNI 环境变量，ADD/DEL方法参数。</li></ul><ul><li>1.2参数二：是 dockershim 从 CNI “配置文件”里加载到的、默认插件的配置信息；由<em>flannel网络方案本身</em>安装时生成。</li></ul><ul><li>2.调用 CNI 插件:引：”dockershim 对 <em>Flannel CNI 插件</em>的调用，其实就是走了个过场。Flannel CNI 插件唯一需要做的，就是对 dockershim 传来的 Network Configuration (CNI配置文件）进行补充。”接下来，Flannel CNI 插件-&gt;调用 CNI bridge 插件(参数一：“CNI环境变量/ADD”, 参数二：”Network Confiuration/Delegate”)，–&gt;“代表”Flannel，将容器加入CNI网络（cni0网桥）</li></ul><ul><li>k8s还有一种三层网络模式,以flannel的host-gw模式为例:host-gw 模式的工作原理，其实就是将每个 Flannel 子网（Flannel Subnet，比如：10.244.1.0/24）的“下一跳”，设置成了该子网对应的宿主机的 IP 地址。</li></ul><ul><li>ebpf程序首先使用llvm编译器把程序编译成字节码,然后字节码作为bpf系统调用的参数加载bpf到内核（这一部为bpf指令）,加载到内核之后bpf JIT则会编译成真正执行的机器指令执行，查看bpf字节码：<code>bpftool prog dump xlated id xx</code>，查看jit编译后的机器指令则把xlated改成jited，内核同时创建一个bpf的对象,然后进行验证操作,判断是否安全,接着查询 kprobe 类型的事件编号,用这个编号创建对应类型的事件之后,使用ioctl把ebpf绑定到事件上</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_a2bca590fd27d18fde6b92629d9b23d3.png" alt=""></p><ul><li>ebpf程序之间的通信可以通过共享ebpf map的方式实现,ebpf map只能通过系统调用创建,返回的是一个文件句柄,通过共享文件句柄可以实现共享内存</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_417cefa34366d9a568efe5e653620975.png" alt=""></p><h2 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h2><ul><li>光顾着打游戏,就做了一题leetcode,两次bfs,不过还是做出来了,好多东西都忘记了,如果想要避免图中出现环的情况,需要设置visited数组,这题比较特殊,从相同颜色的路线进出才会形成环</li></ul><h2 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h2><ul><li><p>LeetCode一题,碰到游戏取胜类的题目一般要优先考虑获胜策略,有了明确的策略会将问题简化很多</p></li><li><p>省考没进面,操!!!!! 60 + 58</p></li></ul><ul><li>看雪看了下,看到了一个用frida进行类似于fart的脱壳的文章,通过frida首先hook执行选项使得程序走switch解释模式(因为art也是有jit的,如果不走switch模式可能没法跟踪到smali指令,而是跟踪到jit好的机器指令),hook shadow_frame.GetThisObject这个函数可跟踪执行具体的每一条smali指令,其中指令中的class id与method id需要从整体dump的dex中索引,这应该就是没有主动调用的fart版本</li></ul><ul><li>epbf的类型第一类是跟踪，即从内核和程序的运行状态中提取跟踪信息，来了解当前系统正在发生什么。第二类是网络，即对网络数据包进行过滤和处理(xdp与TC)，以便了解和控制网络数据包的收发过程。第三类是除跟踪和网络之外的其他类型，包括安全控制、BPF 扩展等等。</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_144f44deac5419c70f8732aaf67dcc9e.png" alt=""></p><ul><li>Cilium值得分析</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_e520a97ee54e3709496f32044413c30f.png" alt=""></p><h2 id="2-7"><a href="#2-7" class="headerlink" title="2.7"></a>2.7</h2><ul><li>LeetCode 每日一题</li><li>通过</li></ul><p>-l命令可以找到linux内核中所有的挂载点,-lv可以查看挂载点的函数签名</p><ul><li>既可以通过内核调试信息和 perf 来查询内核函数、跟踪点以及性能事件的列表，也可以使用 bpftrace 工具来查询。</li></ul><h2 id="2-11"><a href="#2-11" class="headerlink" title="2.11"></a>2.11</h2><ul><li>LeetCode每日一题</li><li>下午做了一下言语刷题,晚上看了下课程</li><li>50题电网领航1000题,复习了冯诺依曼、原、补、移码、IEEE754等知识</li><li>处于恢复期,没正式进入状态</li></ul><h2 id="2-12"><a href="#2-12" class="headerlink" title="2.12"></a>2.12</h2><ul><li>LeetCode 每日一题,曼哈顿距离</li><li>电网复习 100题,复习了OSI七层网络模型与TCP\IP四层网络模型,又看了下TCP协议的滑动窗口与三次握手,四次挥手,温习了常用协议所在的网络分层以及端口号</li><li>ebpf学习:开发、加载ebpf程序可以借助bcc,bcc会帮你完成编译、加载、挂载等步骤,但是在没有bcc的情况下就需要使用libbpf进行用户态的加载;开发ebpf程序时需要编译所需要的内核头文件,在生产环境中是比较危险的,因此对于支持BTF(一种转为ebpf设计的elf文件格式)的系统内核中可以使用bpftool导出vmlinux.h之后导入开发(vmlinux中有BTF的文件相关宏定义与信息)</li></ul><p>BPF CO-RE 需要下列组件之间的紧密合作：</p><p>BTF 类型信息：用于获取内核、BPF 程序类型及 BPF 代码的关键信息， 这也是下面其他部分的基础；<br>编译器（clang）：给 BPF C 代码提供了表达能力和记录重定位（relocation）信息的能力；<br>BPF loader (libbpf)：将内核的 BTF 与 BPF 程序联系起来， 将编译之后的 BPF 代码适配到目标机器的特定内核；(等于做了类似于加载binary文件中进行重定位的工作,把BTF程序进行重定位加载)<br>内核：虽然对 BPF CO-RE 完全不感知，但提供了一些 BPF 高级特性，使某些高级场景成为可能。<br>以上几部分相结合，提供了一种开发可移植 BPF 程序的史无前例的能力：这个开发 过程不仅方便（ease），而且具备很强的适配性（adaptability）和表达能力（expressivity）。 在此之前，实现同样的可移植效果只能通过 BCC 在运行时编译 BPF C 程序，而前面也分析了， BCC 开销非常高。</p><p>本来想把这个python的bcc改成gobpf加载的,但是发现好像不识别这些宏</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_d2a3e2038a76b9ad3c9cb452141588ee.png" alt=""></p><h2 id="2-13"><a href="#2-13" class="headerlink" title="2.13"></a>2.13</h2><ul><li>Leetcode 每日一题, 滑动窗口</li><li>ebpf:现阶段在成熟产品中用来加载、管理ebpf及其map一般都借用了cilium中的方案,因此这个肯定需要学习一下;kprobe用于跟踪内核事件,uprobe用于跟踪用户事件,uretprobe可以用于跟踪函数返回值,内核事件的挂载点在内核符号中已经全部给出,用户事件的挂载点需要借助入dwarf调试信息,比如在《go与ebpf的超能力组合》中一开始演示的使用bpftrace跟踪golang httpserver中的web请求就是借用了golang的符号信息.</li><li>编译型语言应用程序的跟踪与内核的跟踪是类似的，只不过是把跟踪类型从 kprobe 换成了 uprobe 或者 USDT（USDT 的例子我会在接下来的内容中讲到）。不同的地方在于符号信息：应用程序的符号信息可以存放在 ELF 二进制文件中，也可以以单独文件的形式，放到调试文件中；而内核的符号信息除了可以存放到内核二进制文件中之外，还会以  /proc/kallsyms  和  /sys/kernel/debug  等形式暴露到用户空间。</li><li>复习了数据相关知识,</li></ul><h2 id="2-24"><a href="#2-24" class="headerlink" title="2.24"></a>2.24</h2><ul><li>启东人才引进报名成功,昨天预答辩也通过了,短时间内应该又可以休息下了</li><li>LeetCode 每日一题</li><li><p>内核网络协议栈与对应的ebpf跟踪点(Kprobe,uprobe,USDT)<br><img src="https://hackmd.summershrimp.com/uploads/upload_768f7dffdcabf5b3e1a6736532e810b4.png" alt=""></p></li><li><p>跟随实验复现的时候,我发现我的<code>kprobe</code>中并没有kfree_skb,因此导出了一下相关的跟踪点,发现是在tracepoint里,kprobe中有一个<strong>kfree_skb,我猜测是更深一层次的调用,去linux源码里看一下,果然不出所料,kfree_skb中调用了kfree_skb_reason,kfre_skb_reason中则最终调用了</strong>kfree_skb,其实这两个地方跟踪都可以,参数类型都是skb_buffer,所以其实是无所谓的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *kfree_skb_reason - free an sk_buff with special reason</span></span><br><span class="line"><span class="comment"> *@skb: buffer to free</span></span><br><span class="line"><span class="comment"> *@reason: reason why this skb is dropped</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *Drop a reference to the buffer and free it if the usage count has</span></span><br><span class="line"><span class="comment"> *hit zero. Meanwhile, pass the drop reason to &#x27;kfree_skb&#x27;</span></span><br><span class="line"><span class="comment"> *tracepoint.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> __fix_address</span></span><br><span class="line"><span class="function"><span class="title">kfree_skb_reason</span><span class="params">(<span class="keyword">struct</span> sk_buff *skb, <span class="keyword">enum</span> skb_drop_reason reason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">unlikely</span>(!<span class="built_in">skb_unref</span>(skb)))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">DEBUG_NET_WARN_ON_ONCE</span>(reason &lt;= <span class="number">0</span> || reason &gt;= SKB_DROP_REASON_MAX);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (reason == SKB_CONSUMED)</span><br><span class="line"><span class="built_in">trace_consume_skb</span>(skb);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">trace_kfree_skb</span>(skb, __builtin_return_address(<span class="number">0</span>), reason);</span><br><span class="line">__kfree_skb(skb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@spruce-bluejay:/Users/luyiren/hello-near<span class="comment"># sudo bpftrace -l &quot;*kfree_skb*&quot;</span></span><br><span class="line">kfunc:__dev_kfree_skb_any</span><br><span class="line">kfunc:__dev_kfree_skb_irq</span><br><span class="line">kfunc:__kfree_skb</span><br><span class="line">kfunc:__kfree_skb_defer</span><br><span class="line">kfunc:__traceiter_kfree_skb</span><br><span class="line">kfunc:kfree_skb_list</span><br><span class="line">kfunc:kfree_skb_partial</span><br><span class="line">kfunc:kfree_skb_reason</span><br><span class="line">kfunc:kfree_skbmem</span><br><span class="line">kfunc:net_dm_packet_trace_kfree_skb_hit</span><br><span class="line">kfunc:rtnl_kfree_skbs</span><br><span class="line">kfunc:trace_kfree_skb_hit</span><br><span class="line">kprobe:__dev_kfree_skb_any</span><br><span class="line">kprobe:__dev_kfree_skb_irq</span><br><span class="line">kprobe:__kfree_skb</span><br><span class="line">kprobe:__kfree_skb_defer</span><br><span class="line">kprobe:__traceiter_kfree_skb</span><br><span class="line">kprobe:kfree_skb_list</span><br><span class="line">kprobe:kfree_skb_partial</span><br><span class="line">kprobe:kfree_skb_reason</span><br><span class="line">kprobe:kfree_skbmem</span><br><span class="line">kprobe:net_dm_packet_trace_kfree_skb_hit</span><br><span class="line">kprobe:rtnl_kfree_skbs</span><br><span class="line">kprobe:trace_kfree_skb_hit</span><br><span class="line">tracepoint:skb:kfree_skb</span><br><span class="line">________________________________</span><br><span class="line">root@spruce-bluejay:/Users/luyiren/hello-near<span class="comment"># sudo bpftrace -e &#x27;tracepoint:skb:kfree_skb /comm==&quot;curl&quot;/ &#123;printf(&quot;kstack: %s\n&quot;, kstack);&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="2-25"><a href="#2-25" class="headerlink" title="2.25"></a>2.25</h2><ul><li>LeetCode每日一题,问题转化很重要</li><li>ebpf在安全上的应用,对应的跟踪点</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_b299ca0ed1dbcf90a01707a14ee10edc.png" alt=""></p><ul><li>感觉讲的还是很浅啊,如果只是简单的用ebpf对系统调用进行监控也太简单了,这部分想要深入得看一下falco这个项目,这个项目是lsm+ebpf的,这部分开了新坑,文章在博客</li></ul><h2 id="2-26"><a href="#2-26" class="headerlink" title="2.26"></a>2.26</h2><ul><li>LeetCode每日一题</li><li>写了个小demo,借助bcc区分来自于不同container(也就是不同namespace)的系统调用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Daily-Hacking&quot;&gt;&lt;a href=&quot;#Daily-Hacking&quot; class=&quot;headerlink&quot; title=&quot;Daily Hacking&quot;&gt;&lt;/a&gt;Daily Hacking&lt;/h1&gt;&lt;h2 id=&quot;1-11&quot;&gt;&lt;a href=&quot;#1-11&quot;
      
    
    </summary>
    
    
      <category term="ebpf" scheme="https://dispa1r.github.io/tags/ebpf/"/>
    
      <category term="k8s" scheme="https://dispa1r.github.io/tags/k8s/"/>
    
      <category term="日记" scheme="https://dispa1r.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Unpack &amp;&amp; Objection学习笔记</title>
    <link href="https://dispa1r.github.io/2022/07/19/Unpack-Objection%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://dispa1r.github.io/2022/07/19/Unpack-Objection学习笔记/</id>
    <published>2022-07-19T07:30:10.000Z</published>
    <updated>2022-07-19T07:36:18.692Z</updated>
    
    <content type="html"><![CDATA[<p>一些零零散散的学习笔记</p><h2 id="Objection源码分析"><a href="#Objection源码分析" class="headerlink" title="Objection源码分析"></a>Objection源码分析</h2><p>由于这部分分析是因为我想要使用objection的<code>get Instance</code>功能，我希望可以查找到目前heap中所有的DexClassLoader实例，因为实例中会有dex file的路径。</p><p>先简单说一下objection的原理,objection的所有功能都是依靠一个agent.js实现的,通过将agent注入到目标进程中,使用rpc的方式调用agent中的对应函数</p><p>通过阅读objection的<a href="https://github.com/sensepost/objection/wiki">wiki</a>，想要在外部调用objection的命令的话可以通过rpc的方法，但是似乎不够优雅，并且只能使用限制的api。</p><p><a href="https://github.com/sensepost/objection/blob/master/agent/src/rpc/android.ts">https://github.com/sensepost/objection/blob/master/agent/src/rpc/android.ts</a></p><p>以脱样本为例(针对自定义class loader样本需要进行特殊处理)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.car.cloth on (google: 10) [usb] <span class="comment"># android heap search instances dalvik.system.DexClassLoader</span></span><br><span class="line">Class instance enumeration complete <span class="keyword">for</span> dalvik.system.DexClassLoader</span><br><span class="line">Hashcode  Class                         toString()</span><br><span class="line">--------  ----------------------------  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">20991800  dalvik.system.DexClassLoader  dalvik.system.DexClassLoader[DexPathList[[zip file <span class="string">&quot;/data/user/0/com.car.cloth/app_DynamicOptDex/fiZ.json&quot;</span>],nativeLibraryDirectories=[, /system/lib64, /vendor/lib64, /system/product/lib64]]]</span><br></pre></td></tr></table></figure><p>换种方式，使用RPC进行调用，通过在objection中开启<code>enable-api</code>参数可以进行外部api调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://127.0.0.1:8888/rpc/invoke/androidHookingListActivities</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">[&quot;com.cgv.cn.movie.MainActivity&quot;,&quot;com.facebook.react.devsupport.DevSettingsActivity&quot;,&quot;com.cgv.cn.movie.wxapi.WXEntryActivity&quot;,&quot;com.cgv.cn.movie.wxapi.WXPayEntryActivity&quot;,&quot;com.tencent.tauth.AuthActivity&quot;,&quot;com.tencent.connect.common.AssistActivity&quot;,&quot;com.umeng.socialize.media.WBShareCallBackActivity&quot;,&quot;com.sina.weibo.sdk.web.WeiboSdkWebActivity&quot;,&quot;com.sina.weibo.sdk.share.WbShareTransActivity&quot;,&quot;com.unionpay.uppay.PayActivity&quot;,&quot;com.unionpay.UPPayWapActivity&quot;,&quot;com.tencent.captchasdk.TCaptchaPopupActivity&quot;,&quot;com.alipay.sdk.app.H5PayActivity&quot;,&quot;com.alipay.sdk.app.H5AuthActivity&quot;,&quot;com.alipay.sdk.app.PayResultActivity&quot;,&quot;com.alipay.sdk.app.AlipayResultActivity&quot;,&quot;com.alipay.sdk.app.H5OpenAuthActivity&quot;,&quot;com.cmic.sso.sdk.activity.LoginAuthActivity&quot;,&quot;cn.jiguang.verifysdk.CtLoginActivity&quot;,&quot;cn.jpush.android.ui.PopWinActivity&quot;,&quot;cn.jpush.android.ui.PushActivity&quot;,&quot;cn.jpush.android.service.JNotifyActivity&quot;,&quot;cn.jpush.android.service.DActivity&quot;,&quot;com.yalantis.ucrop.UCropActivity&quot;,&quot;com.google.android.gms.common.api.GoogleApiActivity&quot;]</span><br></pre></td></tr></table></figure><h3 id="整体一览"><a href="#整体一览" class="headerlink" title="整体一览"></a>整体一览</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">objection-master</span><br><span class="line">├── CONTRIBUTING.md</span><br><span class="line">├── LICENSE</span><br><span class="line">├── MANIFEST.in</span><br><span class="line">├── Makefile</span><br><span class="line">├── README.md</span><br><span class="line">├── agent</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── package-lock.json</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── src</span><br><span class="line">│   │   ├── android</span><br><span class="line">│   │   ├── generic</span><br><span class="line">│   │   ├── index.ts</span><br><span class="line">│   │   ├── ios</span><br><span class="line">│   │   ├── lib</span><br><span class="line">│   │   └── rpc</span><br><span class="line">│   ├── tsconfig.json</span><br><span class="line">│   └── tslint.json</span><br><span class="line">├── images</span><br><span class="line">│   ├── android_ls.png</span><br><span class="line">│   ├── android_ssl_pinning_bypass.png</span><br><span class="line">│   ├── api.png</span><br><span class="line">│   ├── frida_logo.png</span><br><span class="line">│   ├── ios_keychain.png</span><br><span class="line">│   ├── ios_ls.png</span><br><span class="line">│   ├── ios_ssl_pinning_bypass.png</span><br><span class="line">│   ├── objection.png</span><br><span class="line">│   └── sqlite_example.png</span><br><span class="line">├── objection</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── app.py</span><br><span class="line">│   │   ├── rpc.py</span><br><span class="line">│   │   └── script.py</span><br><span class="line">│   ├── commands</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── android</span><br><span class="line">│   │   ├── command_history.py</span><br><span class="line">│   │   ├── custom.py</span><br><span class="line">│   │   ├── device.py</span><br><span class="line">│   │   ├── filemanager.py</span><br><span class="line">│   │   ├── frida_commands.py</span><br><span class="line">│   │   ├── http.py</span><br><span class="line">│   │   ├── ios</span><br><span class="line">│   │   ├── jobs.py</span><br><span class="line">│   │   ├── memory.py</span><br><span class="line">│   │   ├── mobile_packages.py</span><br><span class="line">│   │   ├── plugin_manager.py</span><br><span class="line">│   │   ├── sqlite.py</span><br><span class="line">│   │   └── ui.py</span><br><span class="line">│   ├── console</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── cli.py</span><br><span class="line">│   │   ├── commands.py</span><br><span class="line">│   │   ├── completer.py</span><br><span class="line">│   │   ├── helpfiles</span><br><span class="line">│   │   └── repl.py</span><br><span class="line">│   ├── state</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── api.py</span><br><span class="line">│   │   ├── app.py</span><br><span class="line">│   │   ├── connection.py</span><br><span class="line">│   │   ├── device.py</span><br><span class="line">│   │   ├── filemanager.py</span><br><span class="line">│   │   └── jobs.py</span><br><span class="line">│   └── utils</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       ├── agent.py</span><br><span class="line">│       ├── assets</span><br><span class="line">│       ├── helpers.py</span><br><span class="line">│       ├── patchers</span><br><span class="line">│       ├── plugin.py</span><br><span class="line">│       └── update_checker.py</span><br><span class="line">├── plugins</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── api</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   ├── flex</span><br><span class="line">│   │   ├── README.md</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── libFlex.h</span><br><span class="line">│   │   └── libFlex.m</span><br><span class="line">│   ├── mettle</span><br><span class="line">│   │   ├── README.md</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   └── stetho</span><br><span class="line">│       ├── README.md</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── index.js</span><br><span class="line">├── requirements-dev.txt</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── setup.py</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── commands</span><br><span class="line">    │   ├── __init__.py</span><br><span class="line">    │   ├── android</span><br><span class="line">    │   ├── ios</span><br><span class="line">    │   ├── test_command_history.py</span><br><span class="line">    │   ├── test_device.py</span><br><span class="line">    │   ├── test_filemanager.py</span><br><span class="line">    │   ├── test_frida_commands.py</span><br><span class="line">    │   ├── test_jobs.py</span><br><span class="line">    │   ├── test_memory.py</span><br><span class="line">    │   ├── test_mobile_packages.py</span><br><span class="line">    │   ├── test_plugin_manager.py</span><br><span class="line">    │   └── test_ui.py</span><br><span class="line">    ├── console</span><br><span class="line">    │   ├── __init__.py</span><br><span class="line">    │   ├── test_cli.py</span><br><span class="line">    │   ├── test_completer.py</span><br><span class="line">    │   └── test_repl.py</span><br><span class="line">    ├── data</span><br><span class="line">    │   └── plugin</span><br><span class="line">    ├── helpers.py</span><br><span class="line">    ├── state</span><br><span class="line">    │   ├── __init__.py</span><br><span class="line">    │   ├── test_app.py</span><br><span class="line">    │   └── test_jobs.py</span><br><span class="line">    └── utils</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        ├── patchers</span><br><span class="line">        └── test_helpers.py</span><br></pre></td></tr></table></figure><p>其中python对应的部分在objection目录下,启动入口为cli.py;agent目录下存放的是真正实现功能的frida js代码(真正使用pip 安装时下载的agent代码为编译后的,可读性交叉较差)</p><h3 id="向上溯源分析"><a href="#向上溯源分析" class="headerlink" title="向上溯源分析"></a>向上溯源分析</h3><p>我们知道遍历目前堆上所有class实例的命令为 <code>android heap search instances xxx.class</code>,我们可以先找到对应的command代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">instances</span>(<span class="params">args: <span class="built_in">list</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Asks the agent to print the currently live instances of a particular class</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param args:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">1</span>:</span><br><span class="line">        click.secho(<span class="string">&#x27;Usage: android heap search instances &lt;class&gt; (eg: com.example.test)&#x27;</span>, bold=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    target_class = args[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    api = state_connection.get_api()</span><br><span class="line">    instance_results = api.android_heap_get_live_class_instances(target_class)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(instance_results) &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    click.secho(tabulate(</span><br><span class="line">        [[</span><br><span class="line">            entry[<span class="string">&#x27;hashcode&#x27;</span>],</span><br><span class="line">            entry[<span class="string">&#x27;classname&#x27;</span>],</span><br><span class="line">            entry[<span class="string">&#x27;tostring&#x27;</span>],</span><br><span class="line">        ] <span class="keyword">for</span> entry <span class="keyword">in</span> instance_results], headers=[<span class="string">&#x27;Hashcode&#x27;</span>, <span class="string">&#x27;Class&#x27;</span>, <span class="string">&#x27;toString()&#x27;</span>],</span><br><span class="line">    ))</span><br></pre></td></tr></table></figure><p>最终是调用了api中的<code>android_heap_get_live_class_instances</code> function,api存在于connection中,使用get api,state在cli.py中被设置参数并且初始化,具体初始化参数与启动frida的参数类似.</p><p>初始化一个objection的connection需要的是</p><p>get api函数实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_api</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Return a Frida RPC API session</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.agent:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;No session available to get API&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.agent.exports()</span><br></pre></td></tr></table></figure><p>api函数返回的是agent的exports,可以理解为agent.js中导出的可用的函数,再去看一下export这个函数的本质</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exports</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns the RPC exports exposed by the Frida agent</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.script:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Need a script created before reading exports()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.script.exports</span><br></pre></td></tr></table></figure><p>返回的是scrit对象的export属性,再去看一下script是在哪里初始化.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.script = self.session.create_script(source=self._get_agent_source())</span><br><span class="line">self.script.on(<span class="string">&#x27;message&#x27;</span>, self.handlers.script_on_message)</span><br><span class="line">self.script.load()</span><br></pre></td></tr></table></figure><p>script在agent的attach函数中被初始化,其中脚本路径是从_get_agent_source中获得的,其中主要的变量为agent_path,这个变量用于加载脚本文件,二次开发的话可以在这里添加脚本文件.</p><p>script、session、device这几个关键的对象都是来自于frida core,这部分和常规使用frida api一样,不做赘述.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">device: frida.core.Device = <span class="literal">None</span></span><br><span class="line">session: frida.core.Session = <span class="literal">None</span></span><br><span class="line">script: frida.core.Script = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>最终调用<code>android_heap_get_live_class_instances</code> 时也是通过rpc调用的,rpc调用时会进行函数的重命名,将函数从蛇形变为小驼峰?(应该是这样的),最终对应的export关系如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">androidHeapGetLiveClassInstances</span>: (<span class="attr">clazz</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">IHeapObject</span>[]&gt; =&gt; heap.<span class="title function_">getInstances</span>(clazz),</span><br><span class="line">  <span class="attr">androidHeapPrintFields</span>: (<span class="attr">handle</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">IJavaField</span>[]&gt; =&gt; heap.<span class="title function_">fields</span>(handle),</span><br><span class="line">  <span class="attr">androidHeapPrintMethods</span>: (<span class="attr">handle</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>[]&gt; =&gt; heap.<span class="title function_">methods</span>(handle),</span><br></pre></td></tr></table></figure><p>因此最后实际调用的函数为js中的<code>getInstances</code>函数,</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getInstances = (<span class="attr">clazz</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>[]&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">wrapJavaPerform</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    handles[clazz] = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tslint:disable:only-arrow-functions</span></span><br><span class="line">    <span class="comment">// tslint:disable:object-literal-shorthand</span></span><br><span class="line">    <span class="comment">// tslint:disable:no-empty</span></span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(clazz, &#123;</span><br><span class="line">      <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        c.<span class="title function_">log</span>(<span class="string">`Class instance enumeration complete for <span class="subst">$&#123;c.green(clazz)&#125;</span>`</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">        handles[clazz].<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">instance</span>: instance,</span><br><span class="line">          <span class="attr">hashcode</span>: instance.<span class="title function_">hashCode</span>(),</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// tslint:enable</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handles[clazz].<span class="title function_">map</span>((h): <span class="function"><span class="params">IHeapNormalised</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">hashcode</span>: h.<span class="property">hashcode</span>,</span><br><span class="line">        <span class="attr">classname</span>: clazz,</span><br><span class="line">        <span class="attr">tostring</span>: h.<span class="property">instance</span>.<span class="title function_">toString</span>(),</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原理也比较简单,就是通过java.choose去获取相关的类实例,并且通过rpc返回给console端.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一步我打算使用objection内存漫游的一些功能,比如说获取一些敏感的类、可疑的实例等,同时需求中的批量hook功能,我也打算使用objection实现,当然不是通过console,我打算仅使用它的agent的功能,因此理解objection项目架构与运行原理是有必要的.</p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>打算使用objection的批量hook功能，以及查找可疑类、方法、实例的功能，最后将unpack功能集成进去，同时阅读下frida core代码</p><h2 id="Android-10下脱壳的不同点"><a href="#Android-10下脱壳的不同点" class="headerlink" title="Android 10下脱壳的不同点"></a>Android 10下脱壳的不同点</h2><ul><li>首先loadDexFile之类的实现从之前的libart.so变成了libdexfile.so，这一点在源码中也可以看出来。<code>dex_file_loader.cc</code>现在位于<code>art/libdexfile/dex</code>下，获取so时路径也发生了改变，现在的路径位于<code>/apex/com.android.runtime.release/lib</code> 以及 <code>/apex/com.android.runtime.release/lib64</code> 下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sailfish:/system/apex/com.android.runtime.release/lib64 # ls</span><br><span class="line">bionic                 libartbase.so        libdexfile.so          libjavacore.so     libopenjdkjvm.so</span><br><span class="line">libadbconnection.so    libartpalette.so     libdexfile_external.so libjdwp.so         libopenjdkjvmti.so</span><br><span class="line">libandroidicu.so       libbacktrace.so      libdexfile_support.so  liblzma.so         libpac.so</span><br><span class="line">libandroidio.so        libbase.so           libdt_fd_forward.so    libnativebridge.so libprofile.so</span><br><span class="line">libart-compiler.so     libc++.so            libdt_socket.so        libnativehelper.so libsigchain.so</span><br><span class="line">libart-dexlayout.so    libc_malloc_debug.so libexpat.so            libnativeloader.so libunwindstack.so</span><br><span class="line">libart-disassembler.so libc_malloc_hooks.so libicui18n.so          libnpt.so          libvixl.so</span><br><span class="line">libart.so              libcrypto.so         libicuuc.so</span><br></pre></td></tr></table></figure><ul><li>copy出来nm看一下函数的签名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ nm libdexfile.so | grep OpenCommon</span><br><span class="line">0001bb51 T _ZN3art13DexFileLoader10OpenCommonEPKhjS2_jRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPKNS_10OatDexFileEbbPS9_NS3_10unique_ptrINS_16DexFileContainerENS3_14default_deleteISH_EEEEPNS0_12VerifyResultE</span><br><span class="line">000149a9 T _ZN3art16ArtDexFileLoader10</span><br><span class="line">EPKhjS2_jRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPKNS_10OatDexFileEbbPS9_NS3_10unique_ptrINS_16DexFileContainerENS3_14default_deleteISH_EEEEPNS_13DexFileLoader12VerifyResultE</span><br></pre></td></tr></table></figure></li><li>64位32位差异化处理，需要具体分析脱壳点的函数签名，一般来说在获取不到调用参数的情况下，可以根据arm64调用规则去context中获取寄存器和内存数据，以脱壳获取dex加载的base address为例，一般来说可以获取context.x0</li></ul><h2 id="脱二代壳第一步–check"><a href="#脱二代壳第一步–check" class="headerlink" title="脱二代壳第一步–check"></a>脱二代壳第一步–check</h2><p>通过python解析dex file，并且获取dex file中的signature校验判断是否加了二代壳。</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_309637bc57816719cbb3521ba90d9d9b.png" alt=""></p><p>signature在magic和check sum的后面，也就是dex偏移12个字节开始，长度为20个字节，这部分还是比较好算的，现在还需要考虑的一个问题就是multi dex的情况</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><p>先重构了一下代码，之前的main函数过于臃肿，重构之后分为了<code>init_agent</code>获取device和agent等，现在的main函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    logging.basicConfig(level=logging.INFO)</span><br><span class="line">    package_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    install_app(package_path)</span><br><span class="line">    package_name = static_analysis(package_path)</span><br><span class="line">    extract_dex_file( package_path , package_name)</span><br><span class="line">    check_packaed_2()</span><br><span class="line">    <span class="built_in">print</span>(is_packed_with_2)</span><br><span class="line">    agent,session,device,pid = init_agent(package_name)</span><br><span class="line">    unpack_and_hook(agent,session,package_name,device,pid)</span><br><span class="line">    sys.stdin.read()</span><br></pre></td></tr></table></figure><p>最后把得到的所有的dex读取出来，把所有的bytes读取到一个全局的list中，最后进行signature的check。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extract_dex_file</span>(<span class="params">filepath,package_name</span>):</span><br><span class="line">    <span class="comment"># 只用来判断指令是否篡改，这里不需要把文件落地</span></span><br><span class="line">    apkfile = zipfile.ZipFile(filepath,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    target_dict = <span class="string">&#x27;./&#x27;</span> + package_name</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(target_dict) == <span class="literal">False</span>:</span><br><span class="line">        os.mkdir(target_dict)</span><br><span class="line">    <span class="keyword">for</span> tempfile <span class="keyword">in</span> apkfile.namelist():</span><br><span class="line">        <span class="keyword">if</span> tempfile.endswith(<span class="string">&#x27;.dex&#x27;</span>):</span><br><span class="line">            bs = apkfile.read(tempfile)</span><br><span class="line">            dex_bs.append(bs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_packaed_2</span>():</span><br><span class="line">   <span class="keyword">for</span> dex_bytes <span class="keyword">in</span> dex_bs:</span><br><span class="line">       signature = dex_bytes[<span class="number">12</span>:<span class="number">32</span>]</span><br><span class="line">       data_source = dex_bytes[<span class="number">32</span>:]</span><br><span class="line">       sha1 = hashlib.sha1()</span><br><span class="line">       sha1.update(data_source)</span><br><span class="line">       test1 =sha1.digest()</span><br><span class="line">       <span class="keyword">if</span> test1 != signature:</span><br><span class="line">        logger.info(<span class="string">&#x27;this apk seems be packed with ins_extraction&#x27;</span>)</span><br><span class="line">        is_packaed_with_2 = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="使用Objection-Agent进行自动搜索与hook"><a href="#使用Objection-Agent进行自动搜索与hook" class="headerlink" title="使用Objection Agent进行自动搜索与hook"></a>使用Objection Agent进行自动搜索与hook</h2><h3 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路"></a>大体思路</h3><p>可以使用objection agent中提供的功能进行批量hook，以下面三个api为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">com.cgv.cn.movie on (google: 10) [usb] # android hooking watch class_method android.net.wifi.WifiInfo.getMacAddress --dump-backtrace</span><br><span class="line">(agent) Attempting to watch class android.net.wifi.WifiInfo and method getMacAddress.</span><br><span class="line">(agent) Hooking android.net.wifi.WifiInfo.getMacAddress()</span><br><span class="line">(agent) Registering job 419365. Type: watch-method for: android.net.wifi.WifiInfo.getMacAddress</span><br><span class="line">com.cgv.cn.movie on (google: 10) [usb] # android hooking watch class_method android.telephony.gsm.SmsManager.sendTextMessage --dump-backtrace</span><br><span class="line">(agent) Attempting to watch class android.telephony.gsm.SmsManager and method sendTextMessage.</span><br><span class="line">(agent) Hooking android.telephony.gsm.SmsManager.sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent)</span><br><span class="line">(agent) Registering job 426391. Type: watch-method for: android.telephony.gsm.SmsManager.sendTextMessage</span><br><span class="line">com.cgv.cn.movie on (google: 10) [usb] # android hooking watch class_method android.webkit.WebView.loadUrl --dump-backtrace</span><br><span class="line">(agent) Attempting to watch class android.webkit.WebView and method loadUrl.</span><br><span class="line">(agent) Hooking android.webkit.WebView.loadUrl(java.lang.String)</span><br><span class="line">(agent) Hooking android.webkit.WebView.loadUrl(java.lang.String, java.util.Map)</span><br><span class="line">(agent) Registering job 039921. Type: watch-method for: android.webkit.WebView.loadUrl</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在objection中，hook有三个选项，<code>--dump-args</code> 代表返回参数，<code>--dump-return</code>返回值以及<code>--dump-backtrace</code>打印调用栈，通过这三项可以实现对目标方法的全方面监控，</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>不使用objection自带的console应用，注入objection的agent，自己暴露rpc接口调用，并且打算添加一个脱壳rpc调用接口，目前实现的：安装apk，静态分析拿到axml文件（要用到里面的activity、包名信息判断是否加壳）、读取文件中的api列表并且批量hook以及初步脱壳功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">__version__ = <span class="string">&quot;2.0.1&quot;</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> wallbreaker.connection <span class="keyword">import</span> Connection</span><br><span class="line"><span class="keyword">from</span> apkutils <span class="keyword">import</span> APK</span><br><span class="line"><span class="keyword">from</span> agent <span class="keyword">import</span> HookCenter</span><br><span class="line"><span class="keyword">from</span> apkutils.axml <span class="keyword">import</span> AXMLPrinter</span><br><span class="line"><span class="keyword">from</span> apkParse <span class="keyword">import</span> Manifest</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;hook-center&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SessionConnection</span>(<span class="title class_ inherited__">Connection</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, device, session</span>):</span><br><span class="line">        self.device = device</span><br><span class="line">        self.session = session</span><br><span class="line">        self.process = <span class="built_in">str</span>(self.session)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_fixup_version</span>(<span class="params">parser: argparse.ArgumentParser</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(parser, <span class="string">&quot;_actions&quot;</span>): <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> action <span class="keyword">in</span> parser._actions:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;--version&quot;</span> <span class="keyword">in</span> action.option_strings \</span><br><span class="line">                <span class="keyword">and</span> action.dest == <span class="string">&quot;version&quot;</span>:</span><br><span class="line">            action.version = __version__</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch_hook_method</span>(<span class="params">agent</span>): </span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;api.txt&quot;</span>)</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        agent.watch_mathods(line)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">install_app</span>(<span class="params">path</span>):</span><br><span class="line">    p = subprocess.Popen(<span class="string">&quot;adb install &quot;</span> + path, shell=<span class="literal">True</span>, stdout=subprocess.PIPE)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    logger.info(<span class="string">&quot;install app&quot;</span>)</span><br><span class="line">    r = p.stdout.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Success&#x27;</span> <span class="keyword">in</span> r :</span><br><span class="line">        logger.info(<span class="string">&quot;app installed successfully&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.info(<span class="string">&quot;fail to install app&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apk_parser</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Manifest(Class)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        manifest = file.read(<span class="string">&#x27;AndroidManifest.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Manifest(AXMLPrinter(manifest).get_xml())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_apk_info</span>(<span class="params">apkFilePath</span>):</span><br><span class="line">    parser = apk_parser(apkFilePath)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;package name &quot;</span> + parser.package_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;version name &quot;</span> + parser.version_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;version code &quot;</span> +  parser.version_code)</span><br><span class="line">    permissions = parser.permissions</span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> permissions:</span><br><span class="line">        <span class="built_in">print</span>(permission)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    package_path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    axml = parse_apk_info(package_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;package name &quot;</span> + axml.package_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;version name &quot;</span> + axml.version_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;version code &quot;</span> +  axml.version_code)</span><br><span class="line">    permissions = axml.permissions</span><br><span class="line">    <span class="keyword">for</span> permission <span class="keyword">in</span> permissions:</span><br><span class="line">        <span class="built_in">print</span>(permission)</span><br><span class="line"></span><br><span class="line">    device = frida.get_usb_device()</span><br><span class="line">    session = device.spawn(axml.package_name)</span><br><span class="line">    connection = SessionConnection(device,session)</span><br><span class="line">    agent = HookCenter(connection)</span><br><span class="line">    <span class="built_in">print</span>(agent)</span><br><span class="line">    result = agent.get_instance(<span class="string">&#x27;dalvik.system.DexClassLoader&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\yiren_lu\Desktop\Hook Center\hookCenter&gt; python .\main.py</span><br><span class="line">HookCenter&lt;Connection(pid=Session(pid=12666), connected:True), attached=True&gt;</span><br><span class="line">Class instance enumeration complete for dalvik.system.DexClassLoader</span><br><span class="line">[&#123;&#x27;hashcode&#x27;: 239431238, &#x27;classname&#x27;: &#x27;dalvik.system.DexClassLoader&#x27;, &#x27;tostring&#x27;: &#x27;dalvik.system.DexClassLoader[DexPathList[[zip file &quot;/data/user/0/com.car.cloth/app_DynamicOptDex/fiZ.json&quot;],nativeLibraryDirectories=[, /system/lib64, /vendor/lib64, /system/product/lib64]]]&#x27;&#125;]</span><br></pre></td></tr></table></figure><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>api文件中的不用写全api，只需要写部分后自动模糊搜索对应的method并且全部watch</p><p>-</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一些零零散散的学习笔记&lt;/p&gt;
&lt;h2 id=&quot;Objection源码分析&quot;&gt;&lt;a href=&quot;#Objection源码分析&quot; class=&quot;headerlink&quot; title=&quot;Objection源码分析&quot;&gt;&lt;/a&gt;Objection源码分析&lt;/h2&gt;&lt;p&gt;由于这部分分析
      
    
    </summary>
    
    
      <category term="unpack" scheme="https://dispa1r.github.io/tags/unpack/"/>
    
      <category term="Frida" scheme="https://dispa1r.github.io/tags/Frida/"/>
    
      <category term="Objection" scheme="https://dispa1r.github.io/tags/Objection/"/>
    
      <category term="‘reverse’" scheme="https://dispa1r.github.io/tags/%E2%80%98reverse%E2%80%99/"/>
    
  </entry>
  
  <entry>
    <title>跨链论文-IOTJ2021</title>
    <link href="https://dispa1r.github.io/2022/06/06/%E8%B7%A8%E9%93%BE%E8%AE%BA%E6%96%87-IOTJ2021/"/>
    <id>https://dispa1r.github.io/2022/06/06/跨链论文-IOTJ2021/</id>
    <published>2022-06-06T08:43:02.000Z</published>
    <updated>2022-06-06T08:43:50.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A-cross-chain-trusted-reputation-scheme-for-a-shared-charging-platform-based-on-blockchain"><a href="#A-cross-chain-trusted-reputation-scheme-for-a-shared-charging-platform-based-on-blockchain" class="headerlink" title="A cross-chain trusted reputation scheme for a shared charging platform based on blockchain"></a>A cross-chain trusted reputation scheme for a shared charging platform based on blockchain</h1><h2 id="解决的三个问题"><a href="#解决的三个问题" class="headerlink" title="解决的三个问题"></a>解决的三个问题</h2><ul><li>1) It is difficult to verify the authenticity of information. When calculating reputation of the multi-chain charging model, C2T smart contract needs to call the information on different blockchains. Due to different consensus mechanisms adopted by different blockchains, the authenticity of the information cannot be mutually verified.<br>这里是跨链数据真实性的问题</li><li>2) It is difficult to verify the real-time of information. Reputation is a real-time concept. To ensure the validity of reputation, real-time data need to be called from different blockchains. The authenticity of data is not the same as real-time: the authenticity of data can be verified by the information on the blockchain, while outdated real data cannot reflect its real-time performance.<br>数据实时性的问题</li><li>3) The calculated reputation may be inconsistent with the information recorded in the blockchain. During the process of calculating reputation, information on blockchains is still being written, which will cause the calculated reputation to be inconsistent with the information on the blockchain, resulting in invalid reputation.<br>计算过程中链上数据仍然在更新，导致数据一致性的问题</li></ul><h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><p>1) To solve the problem of calculating reputation in the multi-chain charging model, we design a $C_2T$ smart contract to implement information calls between different blockchains.<br>为了解决单链存储和查询信息的效率问题，提出了一种多链架构模型，并且设计了一种$C_2T$智能合约进行多链数据查询<br>2) To verify the authenticity of information called between different blockchains, we propose a data mutual trust mechanism based on merkel proof. In the data mutual trust mechanism, one party can quickly prove the authenticity of specific data on other blockchains without obtaining the full data.<br>解决上面的问题一，数据真实性的问题，利用默克尔证明快速进行验证数据真实性并且不用获取到全部信息<br>3) Considering the block size limitation issue, to achieve real-time validation of cross-chain information, we propose a new data structure called VerRealTime composed of multiple counting bloom filters (MCBF), which can ensure the real-time of cross chain information and save space.<br>利用多重计数布隆过滤器解决上述问题二，数据实时性的问题，淘汰和替代旧数据<br>4) To ensure that the reputation is consistent with the information on blockchains, this paper utilizes hash mutexes to lock the information resources used in calculating reputation. After calculating reputation, $C_2T$ smart contract unlocks the locked information to ensure a strong consistency of reputation.<br>解决上述问题3，数据一致性的问题，使用哈希互斥在计算的过程中锁定信息<br>5) We analyze the security of $C_2T$ smart contract in theory. Besides, we conduct experiments on the consumption and effects of $C_2T$ smart contract</p><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p>Background：</p><ul><li>C1 身份信息链，保存了接入的EV、CP的证书</li><li>C2 充电信息链，保存了每一次的充电信息</li><li>C3 repuation链，保存了充电评价</li></ul><h3 id="多链架构"><a href="#多链架构" class="headerlink" title="多链架构"></a>多链架构</h3><p>架构图<br><img src="/uploads/upload_15abbd0cbdfe3060e61878a0621957b8.png" alt=""></p><p>$C_2T$合约工作流程图<br><img src="/uploads/upload_5893afeb1a6c5636d8913ab758f2a7c6.png" alt=""></p><ul><li>1 EV充电完毕发起评价请求至C3，C3激励$C_2T$合约，传入参数为ID</li><li>2 为了保证请求的真实性，合约向C1发起请求，获取对应ID对应的证书，并且将证书发送给合约进行check</li><li>3 如果步骤2没有问题，那么合约向C2发起请求，查询对应的EV和CP的id的最近一条充电记录</li><li>4 合约获取到所需全部信息，进行reputation calculation之后结果保存至C3链</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>数据来源认证<br>$C_2T$合约部署在$C_3$上，其中负责验证的模块$M_v$是单独工作的，</li></ul><p>CallReq q = {$C_j$ , Q} (j ∈ {1, 2}, Q = (ID, $c’$ )) $c’$代表查询语句</p><p><img src="/uploads/upload_0818a6555e3cc9ab403ca226e716757c.png" alt="认证流程图"></p><p>其中c是query result，然后等于说$C_3$在自己链中维护了一个存储的merkle树，其中叶子结点保存了全部的info。</p><ul><li><p>数据实时性<br>MCBF解决数据实时性：优化只需要一次哈希，常规BF与CBF都需要做多次哈希<br><img src="/uploads/upload_84f1e3dea6a15a64b9dde1fc8e9f0570.png" alt=""><br>分为三步：</p><ul><li>初始化：k个CBF置零，哈希得到r，用r对k个大质数mod<img src="/uploads/upload_4f307ec1090fdec98053a065cb3ff8a5.png" alt=""></li><li>查询部分：这个比较简单，就是判断k个CBF中有一个为0则不是实时<img src="/uploads/upload_df0475aa6c3a741e1c8b74800844f45b.png" alt=""></li><li>更新部分：就是先删除再插入<img src="/uploads/upload_8ce4edfa09713fed7c08e1f775db229e.png" alt=""></li></ul></li><li><p>数据一致性：使用哈希锁对即将查询的资源进行lock，两个哈希，一个上锁一个解锁<img src="/uploads/upload_984a222e35110cea4f573abfe3db6eb4.png" alt=""></p></li></ul><h3 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h3><ul><li><p>Authenticity attacks.</p></li><li><p>Real-time attacks</p></li><li><p>Inter-chain write mutual exclusion attack</p></li></ul><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>reputation 计算公式：</p><p><img src="/uploads/upload_c9e9d89145af9401a98c90377c7ef705.png" alt=""><br>$R_{cp,n−1}$ 代表上一次盖CP的分数<br>$\mu$ 是可调整的参数，由rating数据的变化速度决定<br>$W_n$ 是用户给出的评价等级<br>$E_n$ 是CP的得分的期望<br>$\phi(R_{cn,n-1})$ 是衰减函数</p><p><img src="/uploads/upload_1bf0ebea67aa1a861adf61e7ee01795d.png" alt="每一步骤和不同的结果的Gas费用"></p><p><img src="/uploads/upload_5d847e495b7010d877dce5d2354db6d8.png" alt="不同深度的merkel树的验证过程的gas消耗"></p><h2 id="一些可以改进的地方"><a href="#一些可以改进的地方" class="headerlink" title="一些可以改进的地方"></a>一些可以改进的地方</h2><ul><li><p>设立一个比较具体的背景：比如说物流</p></li><li><p>根据接入链数量动态调整Merkle的高度缓解监管链存储压力（设计一种算法）</p></li><li><p>链之间的通信方式？应该还是要通过路由，如果智能合约直接发起请求，那么就破坏了链本身的安全性（可以用第一篇论文的跨链框架）</p></li><li><p>要维护一颗不断有实时信息写入的merkel树开销比较大，并且数据越多，结点数量越多，存储的开销越大。（改进merkel树的结构与设计，这里打算使用递归Merkle树，这样可以维护树的高度保持不变，添加数据也不会有额外的存储开销，并且将叶子结点使用双向链表连接加速查询和实现删除的效果）</p></li></ul><p><img src="/uploads/upload_3edeb498606ef0dec3cf803e6c4d9ee7.png" alt=""></p><ul><li><p>对正在进行的数据进行上锁，如果这个时候有了请求更新会被丢弃吗？（是否可以添加一个缓冲队列，如果冲突则在下一个区块打包）</p></li><li><p>攻击者可以随意伪造一个合法的但是不存在的merkel证明，这个就无法验证（使用递归默克尔树）</p></li><li><p>实验只计算了消耗的gas，并没有把耗时考虑进去</p></li><li><p>取多链数据时，考虑下多链数据的隐私保护，使用同态加密</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;A-cross-chain-trusted-reputation-scheme-for-a-shared-charging-platform-based-on-blockchain&quot;&gt;&lt;a href=&quot;#A-cross-chain-trusted-reputati
      
    
    </summary>
    
    
      <category term="跨链" scheme="https://dispa1r.github.io/tags/%E8%B7%A8%E9%93%BE/"/>
    
      <category term="Paper" scheme="https://dispa1r.github.io/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>NEAR subgraph tutorial</title>
    <link href="https://dispa1r.github.io/2022/06/06/NEAR-subgraph-tutorial/"/>
    <id>https://dispa1r.github.io/2022/06/06/NEAR-subgraph-tutorial/</id>
    <published>2022-06-06T06:52:36.000Z</published>
    <updated>2022-06-06T06:53:32.565Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Building-Production-Ready-Subgraphs-on-NEAR"><a href="#Building-Production-Ready-Subgraphs-on-NEAR" class="headerlink" title="Building Production-Ready Subgraphs on NEAR"></a>Building Production-Ready Subgraphs on NEAR</h1><p>If you’re building your DApps on <a href="https://near.org/">NEAR</a> and are interested to adopt <a href="https://thegraph.com/">The Graph</a> technology to empower the frontend and analytics of your project, this tutorial is exactly for you.</p><p>Let’s get started!!! :rocket:</p><ul><li><a href="#background">Background</a></li><li><a href="#1-introduction-to-events-on-near">1. Introduction to Events on NEAR</a><ul><li><a href="#nep-297-event-standard">NEP-297 Event Standard</a></li><li><a href="#event-standards-for-ft-and-nft">Event Standards for FT and NFT</a></li></ul></li><li><a href="#2-implement-events-in-near-smart-contracts">2. Implement Events in NEAR Smart Contracts</a><ul><li><a href="#events-in-near-standard-contracts">Events in NEAR Standard Contracts</a></li><li><a href="#define-events-for-your-contract">Define Events for Your Contract</a></li><li><a href="#emit-events-in-your-contract">Emit Events in Your Contract</a></li><li><a href="#now-the-events-data-are-ready-for-indexing">Now the Events Data are Ready for Indexing</a></li></ul></li><li><a href="#3-create-subgraphs-with-the-graph">3. Create Subgraphs with The Graph</a><ul><li><a href="#set-your-objectives">Set your Objectives</a></li><li><a href="#create-manifest---subgraphyaml--">Create Manifest (<code>subgraph.yaml</code>)</a></li><li><a href="#design-schema---schemagraphql--">Design Schema (<code>schema.graphql</code>)</a></li><li><a href="#handle-events-with-assemblyscript-mappings">Handle Events with AssemblyScript Mappings</a></li><li><a href="#deploy-the-subgraph">Deploy the Subgraph</a></li></ul></li><li><a href="#4-querying-subgraphs">4. Querying Subgraphs</a><ul><li><a href="#query-with-playground">Query with Playground</a></li><li><a href="#query-with-graphql-client-in-code">Query with GraphQL Client in Code</a></li></ul></li><li><a href="#its-time-to-buidl-now">It’s time to BUIDL now!!!</a></li><li><a href="#about">About</a><ul><li><a href="#about-linear">About LiNEAR</a></li><li><a href="#about-the-graph">About The Graph</a></li></ul></li></ul><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>As the <a href="https://thegraph.com/blog/graph-near">first non-EVM blockchain</a> supported by The Graph, NEAR blockchain allows developers to index data from events, actions, receipts and logs in NEAR smart contracts, and make best use of the data in their applications and analytics using The Graph. NEAR and The Graph integration utilizes StreamingFast’s Firehose interface which is a fast and scalable solution for layer one blockchain indexing.</p><p>There’re already some good tutorials about building subgraphs on NEAR, such as <a href="https://github.com/dabit3/near-subgraph-workshop">Building an NFT API on NEAR with The Graph</a> by Nader, but no one has clearly described how to define and emit events in NEAR smart contracts, and how to process the events in The Graph properly in details.</p><p><a href="https://linearprotocol.org/">LiNEAR</a>, a liquid staking protocol built on NEAR, is the first top tier projects on NEAR that has integrated The Graph in production and does benefit from the flexibility and power of subgraphs to improve statistics and analytics for its users and operations.</p><p>The integration makes it possible for the important metrics on LiNEAR, such as staking APY, liquidity pool APY, and users’ staking rewards, to be  queried from The Graph based on <a href="https://nomicon.io/Standards/EventsFormat">NEAR Event Standard</a>, which replaces our previous less flexible and inefficient solution based on NEAR Indexer.</p><p>Here we’d like to share how LiNEAR has used events and subgraphs in the protocol, and hope that helps more developers to learn and build great projects with NEAR and The Graph.</p><p>In this tutorial, you’ll learn about:</p><ol><li>Introduction to Events on NEAR</li><li>Implement Events in Smart Contracts</li><li>Create Subgraphs with The Graph</li><li>Querying Subgraphs </li></ol><p><img src="https://i.imgur.com/gitBMeB.png" alt=""></p><h2 id="1-Introduction-to-Events-on-NEAR"><a href="#1-Introduction-to-Events-on-NEAR" class="headerlink" title="1. Introduction to Events on NEAR"></a>1. Introduction to Events on NEAR</h2><p>If you’re familiar with the practices of building with The Graph in Ethereum, it’s a common practice to handle the events from smart contracts using subgraphs. We’re following the same practice on NEAR.</p><h3 id="NEP-297-Event-Standard"><a href="#NEP-297-Event-Standard" class="headerlink" title="NEP-297 Event Standard"></a>NEP-297 Event Standard</h3><p>Here we’ll first introduce the <a href="https://nomicon.io/Standards/EventsFormat">Event Standard NEP-297</a> of NEAR. </p><p>The event format NEP-297 is a standard interface for tracking contract activity, using the standard logs capability of NEAR. Events are log entries that start with the <code>EVENT_JSON:</code> prefix followed by a single valid JSON string, which has the following interface:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Interface to capture data about an event</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Arguments</span></span><br><span class="line"><span class="comment">// * `standard`: name of standard, e.g. nep171</span></span><br><span class="line"><span class="comment">// * `version`: e.g. 1.0.0</span></span><br><span class="line"><span class="comment">// * `event`: type of the event, e.g. nft_mint</span></span><br><span class="line"><span class="comment">// * `data`: associate event data. Strictly typed for each set &#123;</span></span><br><span class="line"><span class="comment">// standard, version, event&#125; inside corresponding NEP</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">EventLogData</span> &#123;</span><br><span class="line">    <span class="attr">standard</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">version</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">event</span>: <span class="built_in">string</span>,</span><br><span class="line">    data?: <span class="built_in">unknown</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the event object, the <code>standard</code>, <code>version</code> and <code>event</code> fields are required, and the <code>data</code> field is optional. </p><ol><li>The <code>standard</code> field represents the standard the event follows, such as <code>nep141</code> for fungible token, and <code>nep171</code> for non-fungible token, or your application specific standard, such as <code>linear</code>.</li><li>The <code>version</code> field is the current version of your event definition. If you’ve modified the data schema of some events, it’s recommended to update the version so the subgraph could process events accordingly. </li><li>The <code>event</code> field is the event name, e.g. <code>ft_transfer</code>, <code>ft_mint</code>, <code>ft_burn</code> for fungible tokens, usually in snake case.</li><li>The <code>data</code> field includes the details of the event data. Take fungile token for example, if the event is <code>ft_transfer</code>, the data could be <code>[&#123;&quot;old_owner_id&quot;:&quot;alice&quot;,&quot;new_owner_id&quot;:&quot;bob&quot;,&quot;amount&quot;:&quot;1000000000000000000&quot;&#125;]</code>, which means Alice has transferred 1 token (with 18 decimals) to Bob.</li></ol><h3 id="Event-Standards-for-FT-and-NFT"><a href="#Event-Standards-for-FT-and-NFT" class="headerlink" title="Event Standards for FT and NFT"></a>Event Standards for FT and NFT</h3><p>The Fungible Token (NEP-141) and Non-Fungible Token (NEP-171) standards have defined their own standard interfaces for NEP-297 event format.</p><p>For example, a FT transfer event may look as below, when Alice transfers tokens to both Bob and Charlie in a batch.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">EVENT_JSON<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;standard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nep141&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;event&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ft_transfer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;old_owner_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alice.near&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;new_owner_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bob.near&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;250&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;memo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tip&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;old_owner_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alice.near&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;new_owner_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;charlie.near&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;750&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>An NFT mint event example is as below, when two NFTs are minted for Dave. </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">EVENT_JSON<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;standard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nep171&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;event&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nft_mint&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;owner_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dave.near&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;token_ids&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;superman&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;batman&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>For more details about the FT and NFT standard events, please check out the <a href="https://nomicon.io/Standards/Tokens/FungibleToken/Event">FT Events</a> and <a href="https://nomicon.io/Standards/Tokens/NonFungibleToken/Event">NFT Events</a> docs.</p><p>You’re also allowed to define your own events which we’ll talk about next. </p><h2 id="2-Implement-Events-in-NEAR-Smart-Contracts"><a href="#2-Implement-Events-in-NEAR-Smart-Contracts" class="headerlink" title="2. Implement Events in NEAR Smart Contracts"></a>2. Implement Events in NEAR Smart Contracts</h2><p>Now let’s implement events in your NEAR smart contract. In this tutorial, we’re building the smart contracts in Rust using <a href="https://github.com/near/near-sdk-rs">NEAR Rust SDK</a>.</p><h3 id="Events-in-NEAR-Standard-Contracts"><a href="#Events-in-NEAR-Standard-Contracts" class="headerlink" title="Events in NEAR Standard Contracts"></a>Events in NEAR Standard Contracts</h3><p>If you have built your contracts based on <a href="https://github.com/near/near-sdk-rs/tree/master/near-contract-standards"><code>near-contract-standards</code></a> crate, such as <a href="https://examples.near.org/FT">fungible token</a> and <a href="https://examples.near.org/NFT">non-fungible token</a>, you already have the built-in events implementation in your contract. So you can use that in subgraphs directly.</p><p>The implementation of fungible token events (<code>FtMint</code>, <code>FtBurn</code>, <code>FtTransfer</code>) can be found <a href="https://github.com/near/near-sdk-rs/blob/master/near-contract-standards/src/fungible_token/events.rs">here</a>. Take <code>FtTransfer</code> for example, the event data schema and <code>emit</code> methods need to be implemented. </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Data to log for an FT transfer event. To log this event,</span></span><br><span class="line"><span class="comment">/// call [`.emit()`](FtTransfer::emit).</span></span><br><span class="line"><span class="meta">#[must_use]</span></span><br><span class="line"><span class="meta">#[derive(Serialize, Debug, Clone)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">FtTransfer</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> old_owner_id: &amp;<span class="symbol">&#x27;a</span> AccountId,</span><br><span class="line">    <span class="keyword">pub</span> new_owner_id: &amp;<span class="symbol">&#x27;a</span> AccountId,</span><br><span class="line">    <span class="keyword">pub</span> amount: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">    <span class="meta">#[serde(skip_serializing_if = <span class="string">&quot;Option::is_none&quot;</span>)]</span></span><br><span class="line">    <span class="keyword">pub</span> memo: <span class="type">Option</span>&lt;&amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">FtTransfer</span>&lt;<span class="symbol">&#x27;_</span>&gt; &#123;</span><br><span class="line">    <span class="comment">/// Logs the event to the host. This is required to ensure that the event is triggered</span></span><br><span class="line">    <span class="comment">/// and to consume the event.</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">emit</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">Self</span>::<span class="title function_ invoke__">emit_many</span>(&amp;[<span class="keyword">self</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Emits an FT transfer event, through [`env::log_str`](near_sdk::env::log_str),</span></span><br><span class="line">    <span class="comment">/// where each [`FtTransfer`] represents the data of each transfer.</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">emit_many</span>(data: &amp;[FtTransfer&lt;<span class="symbol">&#x27;_</span>&gt;]) &#123;</span><br><span class="line">        <span class="title function_ invoke__">new_141_v1</span>(Nep141EventKind::<span class="title function_ invoke__">FtTransfer</span>(data)).<span class="title function_ invoke__">emit</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The defined <code>FtTransfer</code> event is emitted in <a href="https://github.com/near/near-sdk-rs/blob/8a2b2e19b27a764abf43df05bd0e530c3ad91d6c/near-contract-standards/src/fungible_token/core_impl.rs#L91-L109"><code>internal_transfer</code></a>.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">internal_transfer</span>(</span><br><span class="line">    &amp;<span class="keyword">mut</span> <span class="keyword">self</span>,</span><br><span class="line">    sender_id: &amp;AccountId,</span><br><span class="line">    receiver_id: &amp;AccountId,</span><br><span class="line">    amount: Balance,</span><br><span class="line">    memo: <span class="type">Option</span>&lt;<span class="type">String</span>&gt;,</span><br><span class="line">) &#123;</span><br><span class="line">    require!(sender_id != receiver_id, <span class="string">&quot;Sender and receiver should be different&quot;</span>);</span><br><span class="line">    require!(amount &gt; <span class="number">0</span>, <span class="string">&quot;The amount should be a positive number&quot;</span>);</span><br><span class="line">    <span class="keyword">self</span>.<span class="title function_ invoke__">internal_withdraw</span>(sender_id, amount);</span><br><span class="line">    <span class="keyword">self</span>.<span class="title function_ invoke__">internal_deposit</span>(receiver_id, amount);</span><br><span class="line">    FtTransfer &#123;</span><br><span class="line">        old_owner_id: sender_id,</span><br><span class="line">        new_owner_id: receiver_id,</span><br><span class="line">        amount: &amp;<span class="title function_ invoke__">U128</span>(amount),</span><br><span class="line">        memo: memo.<span class="title function_ invoke__">as_deref</span>(),</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_ invoke__">emit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Define-Events-for-Your-Contract"><a href="#Define-Events-for-Your-Contract" class="headerlink" title="Define Events for Your Contract"></a>Define Events for Your Contract</h3><p>It’s quite common define you own events in your contract.</p><p>Here we’ll implement the events in LiNEAR as an example. LiNEAR is an liquid staking protocol that you could stake $NEAR and receive liquid $LiNEAR tokens while still earning staking rewards. We will create events for all the main activities. If you’re not familiar with LiNEAR’s features such as <code>Stake</code> and <code>Unstake</code>, we recommend that you spend 1 minute to <a href="https://app.linearprotocol.org/">have a try</a>.</p><p>We’ll define the events for LiNEAR under <a href="https://github.com/linear-protocol/LiNEAR/blob/main/contracts/linear/src/events.rs"><code>events.rs</code></a> in the contract project.</p><p>(1) First, we can define the <code>standard</code> and <code>version</code> in EVENT_JSON as constants.  </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EVENT_STANDARD: &amp;<span class="type">str</span> = <span class="string">&quot;linear&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> EVENT_STANDARD_VERSION: &amp;<span class="type">str</span> = <span class="string">&quot;1.0.0&quot;</span>;</span><br></pre></td></tr></table></figure><p>(2) We’ll define <code>enum Event</code> with all the event data schemas as enums.</p><p>For example, the user operations such as <code>deposit</code>, <code>withdraw</code>, <code>stake</code> and <code>unstake</code> will emit events with the necessary data. The name of the event (e.g. <code>Deposit</code>) will be turned into <code>event</code> field in EVENT_JSON, and the content of the enum (<code>account_id</code>, <code>amount</code> and <code>new_unstaked_balance</code>) will be transformed into <code>data</code> field in EVENT_JSON. </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Serialize, Debug, Clone)]</span></span><br><span class="line"><span class="meta">#[serde(crate = <span class="string">&quot;near_sdk::serde&quot;</span>)]</span></span><br><span class="line"><span class="meta">#[serde(tag = <span class="string">&quot;event&quot;</span>, content = <span class="string">&quot;data&quot;</span>)]</span></span><br><span class="line"><span class="meta">#[serde(rename_all = <span class="string">&quot;snake_case&quot;</span>)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Event</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// Staking Pool Interface</span></span><br><span class="line">    Deposit &#123;</span><br><span class="line">        account_id: &amp;<span class="symbol">&#x27;a</span> AccountId,</span><br><span class="line">        amount: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">        new_unstaked_balance: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">    &#125;,</span><br><span class="line">    Withdraw &#123;</span><br><span class="line">        account_id: &amp;<span class="symbol">&#x27;a</span> AccountId,</span><br><span class="line">        amount: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">        new_unstaked_balance: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">    &#125;,</span><br><span class="line">    Stake &#123;</span><br><span class="line">        account_id: &amp;<span class="symbol">&#x27;a</span> AccountId,</span><br><span class="line">        staked_amount: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">        minted_stake_shares: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">        new_unstaked_balance: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">        new_stake_shares: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">    &#125;,</span><br><span class="line">    Unstake &#123;</span><br><span class="line">        account_id: &amp;<span class="symbol">&#x27;a</span> AccountId,</span><br><span class="line">        unstaked_amount: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">        burnt_stake_shares: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">        new_unstaked_balance: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">        new_stake_shares: &amp;<span class="symbol">&#x27;a</span> U128,</span><br><span class="line">        unstaked_available_epoch_height: <span class="type">u64</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>Events in LiNEAR have various types: user operation events, epoch actions events that can be triggered every epoch by anyone, and validator management events that are emitted when validators are added/removed in the pool. </p><p>(3) Add <code>emit()</code> method for your events, which will serialize your event data and log event JSON following NEP-297 standard.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Event</span>&lt;<span class="symbol">&#x27;_</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">emit</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">emit_event</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Emit event that follows NEP-297 standard: https://nomicon.io/Standards/EventsFormat</span></span><br><span class="line"><span class="comment">// Arguments</span></span><br><span class="line"><span class="comment">// * `standard`: name of standard, e.g. nep171</span></span><br><span class="line"><span class="comment">// * `version`: e.g. 1.0.0</span></span><br><span class="line"><span class="comment">// * `event`: type of the event, e.g. nft_mint</span></span><br><span class="line"><span class="comment">// * `data`: associate event data. Strictly typed for each set &#123;standard, version, event&#125; inside corresponding NEP</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">fn</span> <span class="title function_">emit_event</span>&lt;T: ?<span class="built_in">Sized</span> + Serialize&gt;(data: &amp;T) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = json!(data);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">event_json</span> = json!(&#123;</span><br><span class="line">        <span class="string">&quot;standard&quot;</span>: EVENT_STANDARD,</span><br><span class="line">        <span class="string">&quot;version&quot;</span>: EVENT_STANDARD_VERSION,</span><br><span class="line">        <span class="string">&quot;event&quot;</span>: result[<span class="string">&quot;event&quot;</span>],</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: [result[<span class="string">&quot;data&quot;</span>]]</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    log!(<span class="built_in">format!</span>(<span class="string">&quot;EVENT_JSON:&#123;&#125;&quot;</span>, event_json));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) If your contract contains a bunch of different events, we suggest you create unit tests for your events to make sure the generated EVENT_JSON logs look exactly as you think. Running <code>Event::Stake&#123;...&#125;.emit()</code> will output the EVENT JSON log.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[test]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">stake</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">account_id</span> = &amp;<span class="title function_ invoke__">alice</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">staked_amount</span> = &amp;<span class="title function_ invoke__">U128</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">minted_stake_shares</span> = &amp;<span class="title function_ invoke__">U128</span>(<span class="number">99</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">new_unstaked_balance</span> = &amp;<span class="title function_ invoke__">U128</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">new_stake_shares</span> = &amp;<span class="title function_ invoke__">U128</span>(<span class="number">199</span>);</span><br><span class="line">    Event::Stake &#123;</span><br><span class="line">        account_id,</span><br><span class="line">        staked_amount,</span><br><span class="line">        minted_stake_shares,</span><br><span class="line">        new_unstaked_balance,</span><br><span class="line">        new_stake_shares,</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_ invoke__">emit</span>();</span><br><span class="line">    <span class="built_in">assert_eq!</span>(</span><br><span class="line">        test_utils::<span class="title function_ invoke__">get_logs</span>()[<span class="number">0</span>],</span><br><span class="line">        <span class="string">r#&quot;EVENT_JSON:&#123;&quot;standard&quot;:&quot;linear&quot;,&quot;version&quot;:&quot;1.0.0&quot;,&quot;event&quot;:&quot;stake&quot;,&quot;data&quot;:[&#123;&quot;account_id&quot;:&quot;alice&quot;,&quot;staked_amount&quot;:&quot;100&quot;,&quot;minted_stake_shares&quot;:&quot;99&quot;,&quot;new_unstaked_balance&quot;:&quot;10&quot;,&quot;new_stake_shares&quot;:&quot;199&quot;&#125;]&#125;&quot;#</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can find the complete example of defining events in <a href="https://github.com/linear-protocol/LiNEAR/blob/main/contracts/linear/src/events.rs"><code>events.rs</code></a>.</p><h3 id="Emit-Events-in-Your-Contract"><a href="#Emit-Events-in-Your-Contract" class="headerlink" title="Emit Events in Your Contract"></a>Emit Events in Your Contract</h3><p>Now we have defined events for the contract, let’s emit events in the right places. </p><p>We’ll illustrate how to emit events for <code>stake</code>, <code>unstake</code> and <code>epoch stake</code> actions in LiNEAR.</p><p>(1) <code>Stake</code> event is emitted in <a href="https://github.com/linear-protocol/LiNEAR/blob/2c78f26084bc8e999cea9643c0f7bf3c6aef06f5/contracts/linear/src/internal.rs#L102-L121"><code>internal_stake()</code></a> which is called by all stake functions. The account ID, balances, staked $NEAR amount, and minted $LiNEAR are recorded in the event. Also, one standard <code>FtMint</code> event is emitted since $LiNEAR is minted for the user after staking. </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">fn</span> <span class="title function_">internal_stake</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, amount: Balance) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.total_staked_near_amount += stake_amount;</span><br><span class="line">    <span class="keyword">self</span>.total_share_amount += num_shares;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Increase requested stake amount within the current epoch</span></span><br><span class="line">    <span class="keyword">self</span>.epoch_requested_stake_amount += stake_amount;</span><br><span class="line"></span><br><span class="line">    Event::Stake &#123;</span><br><span class="line">        account_id: &amp;account_id,</span><br><span class="line">        staked_amount: &amp;<span class="title function_ invoke__">U128</span>(charge_amount),</span><br><span class="line">        minted_stake_shares: &amp;<span class="title function_ invoke__">U128</span>(num_shares),</span><br><span class="line">        new_unstaked_balance: &amp;<span class="title function_ invoke__">U128</span>(account.unstaked),</span><br><span class="line">        new_stake_shares: &amp;<span class="title function_ invoke__">U128</span>(account.stake_shares),</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_ invoke__">emit</span>();</span><br><span class="line">    FtMint &#123;</span><br><span class="line">        owner_id: &amp;account_id,</span><br><span class="line">        amount: &amp;<span class="title function_ invoke__">U128</span>(num_shares),</span><br><span class="line">        memo: <span class="title function_ invoke__">Some</span>(<span class="string">&quot;stake&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_ invoke__">emit</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) <code>Unstake</code> event is emitted in <a href="https://github.com/linear-protocol/LiNEAR/blob/2c78f26084bc8e999cea9643c0f7bf3c6aef06f5/contracts/linear/src/internal.rs#L180-L200"><code>internal_unstake()</code></a>  which is called by all (delayed) unstake functions. The account ID, balances, burnt $LiNEAR, received $NEAR amount, and unstake available epoch height are recorded in the event. Also, one standard <code>FtBurn</code> event is emitted since $LiNEAR is burnt when the user is unstaking.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">fn</span> <span class="title function_">internal_unstake</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, amount: <span class="type">u128</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.total_staked_near_amount -= unstake_amount;</span><br><span class="line">    <span class="keyword">self</span>.total_share_amount -= num_shares;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Increase requested unstake amount within the current epoch</span></span><br><span class="line">    <span class="keyword">self</span>.epoch_requested_unstake_amount += unstake_amount;</span><br><span class="line"></span><br><span class="line">    Event::Unstake &#123;</span><br><span class="line">        account_id: &amp;account_id,</span><br><span class="line">        unstaked_amount: &amp;<span class="title function_ invoke__">U128</span>(receive_amount),</span><br><span class="line">        burnt_stake_shares: &amp;<span class="title function_ invoke__">U128</span>(num_shares),</span><br><span class="line">        new_unstaked_balance: &amp;<span class="title function_ invoke__">U128</span>(account.unstaked),</span><br><span class="line">        new_stake_shares: &amp;<span class="title function_ invoke__">U128</span>(account.stake_shares),</span><br><span class="line">        unstaked_available_epoch_height: account.unstaked_available_epoch_height,</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_ invoke__">emit</span>();</span><br><span class="line">    FtBurn &#123;</span><br><span class="line">        owner_id: &amp;account_id,</span><br><span class="line">        amount: &amp;<span class="title function_ invoke__">U128</span>(num_shares),</span><br><span class="line">        memo: <span class="title function_ invoke__">Some</span>(<span class="string">&quot;unstake&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_ invoke__">emit</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) One thing needs to pay attention to in NEAR is that, because the cross-contract call is asynchronous in NEAR’s sharding design, to make sure the events are emitted in the expected status (e.g. entire transaction has been executed successfully), the events should be emitted in the appropriate functions or callbacks. </p><p>Let’s take a look at <code>EpochStakeAttempt</code>, <code>EpochStakeSuccess</code> and <code>EpochStakeFailed</code> as examples.</p><p>The <code>EpochStakeAttemp</code> event is emitted whenever the <a href="https://github.com/linear-protocol/LiNEAR/blob/2c78f26084bc8e999cea9643c0f7bf3c6aef06f5/contracts/linear/src/epoch_actions.rs#L54-L58"><code>epoch_stake</code> function</a> is called.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">epoch_stake</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// update internal state</span></span><br><span class="line">    <span class="keyword">self</span>.stake_amount_to_settle -= amount_to_stake;</span><br><span class="line"></span><br><span class="line">    Event::EpochStakeAttempt &#123;</span><br><span class="line">        validator_id: &amp;candidate.account_id,</span><br><span class="line">        amount: &amp;<span class="title function_ invoke__">U128</span>(amount_to_stake),</span><br><span class="line">    &#125;</span><br><span class="line">    .<span class="title function_ invoke__">emit</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we emit the epoch stake result events in the callback function – <a href="https://github.com/linear-protocol/LiNEAR/blob/2c78f26084bc8e999cea9643c0f7bf3c6aef06f5/contracts/linear/src/epoch_actions.rs#L360-L383"><code>validator_staked_callback()</code></a>. </p><p>The <code>EpochStakeSuccess</code> and <code>EpochStakeFailed</code> events are emitted only when the <code>epoch_stake</code> execution succeeded or failed, but <code>EpochStakeAttempt</code> is emitted as long as the <code>epoch_stake</code> function is executed.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">validator_staked_callback</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, validator_id: AccountId, amount: Balance) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="title function_ invoke__">is_promise_success</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">validator</span> = <span class="keyword">self</span></span><br><span class="line">            .validator_pool</span><br><span class="line">            .<span class="title function_ invoke__">get_validator</span>(&amp;validator_id)</span><br><span class="line">            .<span class="title function_ invoke__">unwrap_or_else</span>(|| <span class="built_in">panic!</span>(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, ERR_VALIDATOR_NOT_EXIST, &amp;validator_id));</span><br><span class="line">        validator.<span class="title function_ invoke__">on_stake_success</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>.validator_pool, amount);</span><br><span class="line"></span><br><span class="line">        Event::EpochStakeSuccess &#123;</span><br><span class="line">            validator_id: &amp;validator_id,</span><br><span class="line">            amount: &amp;<span class="title function_ invoke__">U128</span>(amount),</span><br><span class="line">        &#125;</span><br><span class="line">        .<span class="title function_ invoke__">emit</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// stake failed, revert</span></span><br><span class="line">        <span class="keyword">self</span>.stake_amount_to_settle += amount;</span><br><span class="line"></span><br><span class="line">        Event::EpochStakeFailed &#123;</span><br><span class="line">            validator_id: &amp;validator_id,</span><br><span class="line">            amount: &amp;<span class="title function_ invoke__">U128</span>(amount),</span><br><span class="line">        &#125;</span><br><span class="line">        .<span class="title function_ invoke__">emit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Now-the-Events-Data-are-Ready-for-Indexing"><a href="#Now-the-Events-Data-are-Ready-for-Indexing" class="headerlink" title="Now the Events Data are Ready for Indexing"></a>Now the Events Data are Ready for Indexing</h3><p>Using events in contract is quite straightforward. All you need to do is to define the events for the actions and emit them in the corresponding functions. </p><p>With the on-chain events data, you can now process the data through indexing technologies, such as <a href="https://thegraph.com">The Graph</a>, <a href="https://near-indexers.io/docs/projects/near-indexer-framework">NEAR Indexer</a> and <a href="https://near-indexers.io/docs/projects/near-lake-framework">NEAR Lake</a>. </p><p>We recommend building your data solution with The Graph because it’s the most flexible, powerful and cost effective solution for DApps, while NEAR Indexer and NEAR Lake have their own best use cases that we’re not going to cover in this tutorial. </p><h2 id="3-Create-Subgraphs-with-The-Graph"><a href="#3-Create-Subgraphs-with-The-Graph" class="headerlink" title="3. Create Subgraphs with The Graph"></a>3. Create Subgraphs with The Graph</h2><p>With the event implemented in our contract, now we can develop and deploy subgraphs to capture and handle the events. </p><p>The general steps about how to develop a subgraph on NEAR can be found in <a href="https://thegraph.com/docs/en/supported-networks/near/">the tutorial by The Graph team</a>. We recommend you go through it quickly if you haven’t.</p><p>In this tutorial, we’ll share the details about how to handle events, and how it works in production in the LiNEAR Protocol.</p><p>As mentioned in the <a href="https://thegraph.com/docs/en/supported-networks/near/#building-a-near-subgraph">Building a NEAR Subgraph</a> tutorial, there are three aspects of subgraph definition:</p><ul><li><code>subgraph.yaml</code>: the subgraph manifest, defining the data sources, and how they should be processed.</li><li><code>schema.graphql</code>: a schema file that defines what data is stored for your subgraph, and how to query it via GraphQL.</li><li>AssemblyScript Mappings: <a href="https://thegraph.com/docs/en/developer/assemblyscript-api/">AssemblyScript code</a> that translates from the event data to the entities defined in your schema. </li></ul><p>Next, we’ll talk about all the three aspects with linear-subgraph project as the example: <a href="https://github.com/linear-protocol/linear-subgraph">https://github.com/linear-protocol/linear-subgraph</a></p><p>But before that, let’s ensure we understand our objectives before we start.</p><h3 id="Set-your-Objectives"><a href="#Set-your-Objectives" class="headerlink" title="Set your Objectives"></a>Set your Objectives</h3><p>Before we start developing subgraphs, we should know what kind of info, stats, insights or stories we want to get out of the event data.</p><p>Some of the data could be queried via RPC from the smart contracts, but some statistics and analytics are easier to be queried from subgraph. We will need subgraphs for such cases. </p><p>For LiNEAR, we care about the staking APY, liquidity pool APY, and staking rewards of users, and would like to show the information in the <a href="https://app.linearprotocol.org/">LiNEAR web UI</a>. We also care about analytics of users, validators, liquidity, etc., which could help us to improve the protocol.</p><p>In this tutorial, we’ll briefly talk about how to calculate the <strong>staking APY of LiNEAR Protocol</strong>, which is based on the growth of $LiNEAR price in the past 30 days. In order to reach this goal, we need to get the $LiNEAR price at any timestamp with The Graph. </p><h3 id="Create-Manifest-subgraph-yaml"><a href="#Create-Manifest-subgraph-yaml" class="headerlink" title="Create Manifest (subgraph.yaml)"></a>Create Manifest (<code>subgraph.yaml</code>)</h3><p>The subgraph manifest (<code>subgraph.yaml</code>) contains the below definitions: </p><ol><li><em>blockchain</em>: set data source <code>kind</code> to <code>near</code></li><li><em>network</em>: <code>near-mainnet</code> or <code>near-testnet</code></li><li><em>source account</em>: your contract account, e.g. <code>linear-protocol.near</code></li><li><em>start block</em>: usually the block when your contract was deployed</li><li><em>mapping file</em>: <code>./src/mapping/index.ts</code></li><li><em>entities</em>: the entities defined in the schema file</li><li><em>handler</em>: the handler function in your mapping file (<code>handleReceipt</code>). we use the <code>receiptHandlers</code> since the functions and events are processed at receipt level in NEAR</li></ol><p>See below for the manifest of the LiNEAR subgraph.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">specVersion:</span> <span class="number">0.0</span><span class="number">.4</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">LiNEAR</span> <span class="string">Protocol</span> <span class="string">subgraph</span></span><br><span class="line"><span class="attr">repository:</span> <span class="string">https://github.com/linear-protocol/linear-subgraph</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">./schema.graphql</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">near</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">receipts</span></span><br><span class="line">    <span class="attr">network:</span> &#123;&#123;<span class="string">network</span>&#125;&#125;</span><br><span class="line">    <span class="attr">source:</span></span><br><span class="line">      <span class="attr">account:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;contract&#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">startBlock:</span> &#123;&#123;<span class="string">startBlock</span>&#125;&#125;</span><br><span class="line">    <span class="attr">mapping:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="number">0.0</span><span class="number">.5</span></span><br><span class="line">      <span class="attr">language:</span> <span class="string">wasm/assemblyscript</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">./src/mapping/index.ts</span></span><br><span class="line">      <span class="attr">entities:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">User</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Price</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">TotalSwapFee</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Status</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">FtTransfer</span></span><br><span class="line">      <span class="attr">receiptHandlers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">handler:</span> <span class="string">handleReceipt</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The placeholders <code>&#123;&#123;network&#125;&#125;</code>, <code>&#123;&#123;contract&#125;&#125;</code>, <code>&#123;&#123;startBlock&#125;&#125;</code> are populated with different configurations for mainnet and testnet, which are defined in <code>./config/mainnet.json</code> and <code>./config/testnet.json</code>.</p><p><em>./config/mainnet.json</em></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;near-mainnet&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;contract&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linear-protocol.near&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;startBlock&quot;</span><span class="punctuation">:</span> <span class="number">61147683</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Design-Schema-schema-graphql"><a href="#Design-Schema-schema-graphql" class="headerlink" title="Design Schema (schema.graphql)"></a>Design Schema (<code>schema.graphql</code>)</h3><p>Schema describes the structure of the resulting subgraph database and the relationships between entities. Please notice that the entities are not necessary to be the same as the events we defined in our smart contracts.</p><p>The recommended way is to define the schema based on your data queries and analytics objectives, and the data models in your application. In the case of LiNEAR, we have defined:</p><ul><li><strong>User</strong>: tracks the latest states of each user such as first staking time, transferred amount in total, accumulated minted LiNEAR amount in total, etc. which are not available in contract’s states. You probably also need the <em>User</em> entity in your application as long as you have users.</li><li><strong>Price</strong>: the $LiNEAR price at the timestamp when the total staked NEAR or total supply of $LiNEAR changes. At any given timestamp, <code>$LiNEAR price = total staked NEAR plus its staking rewards / total supply of LiNEAR</code></li><li><strong>TotalSwapFee</strong>: records the total paid swap fees to the liquidity pool at any timestamp when there’re new fees paid</li><li><strong>Status</strong>: records global status such as latest version IDs of prices and total swap fees.</li></ul><p>The <a href="https://thegraph.com/docs/en/developer/create-subgraph-hosted/#built-in-scalar-types">built-in scalar types</a> in The Graph’s GraphQL API are helpful for defining the schema . </p><p><img src="https://i.imgur.com/kc68mnt.png" alt=""></p><p>Below lists the schema for <strong>User</strong> and <strong>Price</strong> in LiNEAR.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">type User @entity&#123;</span><br><span class="line">   id: ID!</span><br><span class="line">   mintedLinear: BigInt!</span><br><span class="line">   unstakedLinear: BigInt!</span><br><span class="line">   stakedNear: BigInt!</span><br><span class="line">   unstakeReceivedNear: BigInt!</span><br><span class="line">   firstStakingTime: BigInt!</span><br><span class="line">   transferedInValue: BigDecimal!</span><br><span class="line">   transferedOutValue: BigDecimal!</span><br><span class="line">   transferedInShares: BigInt!</span><br><span class="line">   transferedOutShares: BigInt!</span><br><span class="line">   feesPaid: BigInt!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Price @entity&#123;</span><br><span class="line">   id: ID!</span><br><span class="line">   timestamp: BigInt!</span><br><span class="line">   method: String!</span><br><span class="line">   event: String!</span><br><span class="line">   receiptHash: String!</span><br><span class="line">   deltaLinearAmount: BigDecimal!</span><br><span class="line">   deltaNearAmount: BigDecimal!</span><br><span class="line">   totalLinearAmount: BigDecimal!</span><br><span class="line">   totalNearAmount: BigDecimal!</span><br><span class="line">   price: BigDecimal!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can run <code>npm run codegen</code> in the LiNEAR subgraph project to generate the schema definitions to <code>./generated/schema.ts</code> that can be used in the mapping files. </p><h3 id="Handle-Events-with-AssemblyScript-Mappings"><a href="#Handle-Events-with-AssemblyScript-Mappings" class="headerlink" title="Handle Events with AssemblyScript Mappings"></a>Handle Events with AssemblyScript Mappings</h3><p>In general, The Graph works by traversing all or some of the blocks of the blockchain, and processing the data (e.g. events) in the block with the handlers designed by developers. </p><p>There are currently two types of handlers supported for NEAR subgraphs:</p><ul><li>block handlers: run on every new block</li><li>receipt handlers: run every time some actions are executed at a specified account</li></ul><p>As mentioned when defining <code>subgraph.yaml</code>, we use the receipt handler in LiNEAR. As long as your application is relying on one or several smart contracts, you should probably also use the receipt handler. </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">receiptHandlers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">handler:</span> <span class="string">handleReceipt</span></span><br></pre></td></tr></table></figure><p>In the AssemblyScript mapping file <code>./src/mapping/index.ts</code>, firstly we process the logs in the current receipt, and extract the event data from the logs, and pass them to <code>handleEvent</code>.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleAction</span>(<span class="params"></span></span><br><span class="line"><span class="params">  action: near.ActionValue,</span></span><br><span class="line"><span class="params">  receipt: near.ReceiptWithOutcome</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (action.<span class="property">kind</span> != near.<span class="property">ActionKind</span>.<span class="property">FUNCTION_CALL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> outcome = receipt.<span class="property">outcome</span>;</span><br><span class="line">  <span class="keyword">const</span> methodName = action.<span class="title function_">toFunctionCall</span>().<span class="property">methodName</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> logIndex = <span class="number">0</span>; logIndex &lt; outcome.<span class="property">logs</span>.<span class="property">length</span>; logIndex++) &#123;</span><br><span class="line">    <span class="keyword">let</span> outcomeLog = outcome.<span class="property">logs</span>[logIndex].<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span> (outcomeLog.<span class="title function_">startsWith</span>(<span class="string">&#x27;EVENT_JSON:&#x27;</span>)) &#123;</span><br><span class="line">      outcomeLog = outcomeLog.<span class="title function_">replace</span>(<span class="string">&#x27;EVENT_JSON:&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> jsonData = json.<span class="title function_">try_fromString</span>(outcomeLog);</span><br><span class="line">      <span class="keyword">const</span> jsonObject = jsonData.<span class="property">value</span>.<span class="title function_">toObject</span>();</span><br><span class="line">      <span class="keyword">const</span> event = jsonObject.<span class="title function_">get</span>(<span class="string">&#x27;event&#x27;</span>)!;</span><br><span class="line">      <span class="keyword">const</span> dataArr = jsonObject.<span class="title function_">get</span>(<span class="string">&#x27;data&#x27;</span>)!.<span class="title function_">toArray</span>();</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">dataObj</span>: <span class="title class_">TypedMap</span>&lt;<span class="built_in">string</span>, <span class="title class_">JSON</span>Value&gt; = dataArr[<span class="number">0</span>].<span class="title function_">toObject</span>();</span><br><span class="line"></span><br><span class="line">      <span class="title function_">handleEvent</span>(methodName, event.<span class="title function_">toString</span>(), dataObj, receipt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleReceipt</span>(<span class="params">receipt: near.ReceiptWithOutcome</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> actions = receipt.<span class="property">receipt</span>.<span class="property">actions</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; actions.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">handleAction</span>(actions[i], receipt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As one of our goals is to calculate the $LiNEAR price, we need to track all the actions that might impact the total staked NEAR plus its rewards, and the total supply of LiNEAR. </p><p>To avoid delving into too many details, here we illustrate how to process the <code>EpochUpdateRewards</code> event when the staking rewards are fetched from validators every epoch, which increases the $LiNEAR price.</p><p>By looking at <a href="https://github.com/linear-protocol/LiNEAR/blob/2c78f26084bc8e999cea9643c0f7bf3c6aef06f5/contracts/linear/src/epoch_actions.rs#L456-L462">the contract code</a>, we know <code>epoch_update_rewards()</code> function and its callback <code>validator_get_balance_callback()</code> will trigger the <code>EpochUpdateRewards</code>, we filter the condition by method name and event name, and then call the corresponding event handler <code>handleEpochUpdateRewards</code>. (Note: <code>method == &#39;epoch_update_rewards&#39;</code> is actually not needed and can be removed, because the event is only emitted in the callback <code>validator_get_balance_callback</code>.)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleEvent</span>(<span class="params"></span></span><br><span class="line"><span class="params">  method: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  event: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  data: TypedMap&lt;<span class="built_in">string</span>, JSONValue&gt;,</span></span><br><span class="line"><span class="params">  receipt: near.ReceiptWithOutcome</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    method == <span class="string">&#x27;epoch_update_rewards&#x27;</span> ||</span><br><span class="line">    method == <span class="string">&#x27;validator_get_balance_callback&#x27;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event == <span class="string">&#x27;epoch_update_rewards&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">handleEpochUpdateRewards</span>(method, event, data, receipt);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == <span class="string">&#x27;ft_mint&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">handleFtMint</span>(method, event, data, receipt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <code>./src/mapping/epoch-action.ts</code>, we have implemented the event handler for <code>EpochUpdateRewards</code>, which will update the $LiNEAR price based on the received staking rewards. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleEpochUpdateRewards</span>(<span class="params"></span></span><br><span class="line"><span class="params">  method: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  event: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  data: TypedMap&lt;<span class="built_in">string</span>, JSONValue&gt;,</span></span><br><span class="line"><span class="params">  receipt: near.ReceiptWithOutcome</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> rewards = <span class="title class_">BigDecimal</span>.<span class="title function_">fromString</span>(data.<span class="title function_">get</span>(<span class="string">&#x27;rewards&#x27;</span>)!.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="title function_">updatePrice</span>(event, method, receipt, rewards, <span class="title class_">BigDecimal</span>.<span class="title function_">zero</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s also necessary to handle <code>FtMint</code> when updating staking rewards because around <code>1%</code> commission fee is charged and sent to the treasury in the form of $LiNEAR. </p><p>In <code>./src/mappping/fungible-token.ts</code>,</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleFtMint</span>(<span class="params"></span></span><br><span class="line"><span class="params">  method: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  event: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  data: TypedMap&lt;<span class="built_in">string</span>, JSONValue&gt;,</span></span><br><span class="line"><span class="params">  receipt: near.ReceiptWithOutcome</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> amount = <span class="title class_">BigDecimal</span>.<span class="title function_">fromString</span>(data.<span class="title function_">get</span>(<span class="string">&#x27;amount&#x27;</span>)!.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="title function_">updatePrice</span>(event, method, receipt, <span class="title class_">BigDecimal</span>.<span class="title function_">zero</span>(), amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can also take a look how <code>updatePrice()</code> works in <a href="https://github.com/linear-protocol/linear-subgraph/blob/b13779eee7c233932b1ed58090c553b75464bdb6/src/helper/price.ts#L5-L36"><code>./src/helper/price.ts</code></a>:</p><ol><li>The last <code>Price</code> object will be read from the <code>Price</code> entities by using the last price version ID saved in <code>Status</code> entity, which is a global state that tracks the latest versions of price, total swap fees, etc.;</li><li>A new <code>Price</code> entity will be created with delta $NEAR / $LiNEAR amount, the updated total $NEAR / $LiNEAR amount, current $LiNEAR price, and other relevant info such as event name, method name, timestamp, etc., and saved into the database;</li><li>Increment the latest Price version ID, and update the latest price value in the global <code>Status</code> record, which will be used in next <code>updatePrice()</code> call.</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updatePrice</span>(<span class="params"></span></span><br><span class="line"><span class="params">  event: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  method: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  receipt: near.ReceiptWithOutcome,</span></span><br><span class="line"><span class="params">  deltaNear: BigDecimal,</span></span><br><span class="line"><span class="params">  deltaLinear: BigDecimal</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> timestamp = receipt.<span class="property">block</span>.<span class="property">header</span>.<span class="property">timestampNanosec</span>;</span><br><span class="line">  <span class="keyword">const</span> receiptHash = receipt.<span class="property">receipt</span>.<span class="property">id</span>.<span class="title function_">toBase58</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> status = <span class="title function_">getOrInitStatus</span>();</span><br><span class="line">  <span class="keyword">let</span> lastPrice = <span class="title function_">getOrInitPrice</span>(status.<span class="property">priceVersion</span>.<span class="title function_">toString</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create new price</span></span><br><span class="line">  <span class="keyword">const</span> nextVersion = status.<span class="property">priceVersion</span>.<span class="title function_">plus</span>(<span class="title class_">BigInt</span>.<span class="title function_">fromU32</span>(<span class="number">1</span>));</span><br><span class="line">  <span class="keyword">let</span> nextPrice = <span class="keyword">new</span> <span class="title class_">Price</span>(nextVersion.<span class="title function_">toString</span>());</span><br><span class="line">  nextPrice.<span class="property">deltaNearAmount</span> = deltaNear;</span><br><span class="line">  nextPrice.<span class="property">deltaLinearAmount</span> = deltaLinear;</span><br><span class="line">  nextPrice.<span class="property">totalNearAmount</span> = lastPrice.<span class="property">totalNearAmount</span>.<span class="title function_">plus</span>(deltaNear);</span><br><span class="line">  nextPrice.<span class="property">totalLinearAmount</span> = lastPrice.<span class="property">totalLinearAmount</span>.<span class="title function_">plus</span>(deltaLinear);</span><br><span class="line">  nextPrice.<span class="property">price</span> = nextPrice.<span class="property">totalNearAmount</span>.<span class="title function_">div</span>(nextPrice.<span class="property">totalLinearAmount</span>);</span><br><span class="line">  nextPrice.<span class="property">timestamp</span> = <span class="title class_">BigInt</span>.<span class="title function_">fromU64</span>(timestamp);</span><br><span class="line">  nextPrice.<span class="property">event</span> = event;</span><br><span class="line">  nextPrice.<span class="property">receiptHash</span> = receiptHash;</span><br><span class="line">  nextPrice.<span class="property">method</span> = method;</span><br><span class="line">  nextPrice.<span class="title function_">save</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update status</span></span><br><span class="line">  status.<span class="property">priceVersion</span> = nextVersion;</span><br><span class="line">  status.<span class="property">price</span> = nextPrice.<span class="property">price</span>;</span><br><span class="line">  status.<span class="title function_">save</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that we have all the versioned prices in history, it would be easy to calculate the staking APY which is reflected by the growth of $LiNEAR price. </p><h3 id="Deploy-the-Subgraph"><a href="#Deploy-the-Subgraph" class="headerlink" title="Deploy the Subgraph"></a>Deploy the Subgraph</h3><p>Now we have built the subgraph. It’s the time to deploy it to <a href="https://thegraph.com/docs/en/hosted-service/deploy-subgraph-hosted/">The Graph’s Hosted Service</a> for indexing. </p><p>First, you need to create your subgraph in the <a href="https://thegraph.com/hosted-service/dashboard">Hosted Service dashboard</a> by clicking “Add Subgraph” button, or just visit <a href="https://thegraph.com/hosted-service/subgraph/create?account=All%20Subgraphs">this link</a>. Fill in the necessary description for the subgraph will be good enough.</p><p><img src="https://i.imgur.com/a0L9sNo.png" alt=""></p><p>Next, you can follow the steps in <a href="https://github.com/linear-protocol/linear-subgraph/blob/main/README.md#development">README</a> to deploy LiNEAR subgraph to either testnet or mainnet. Don’t forget to replace the <code>SLUG</code> and <code>ACCESS_TOKEN</code> in <code>.env</code> with yours.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy env and adjust its content</span></span><br><span class="line"><span class="comment"># you can get an access token from https://thegraph.com/explorer/dashboard</span></span><br><span class="line"><span class="built_in">cp</span> .env.example .<span class="built_in">env</span></span><br><span class="line"><span class="comment"># install project dependencies</span></span><br><span class="line">npm i</span><br><span class="line"><span class="comment"># prepare subgraph.yaml</span></span><br><span class="line">npm run prepare:mainnet</span><br><span class="line"><span class="comment"># run codegen</span></span><br><span class="line">npm run codegen</span><br><span class="line"><span class="comment"># now you&#x27;re able to deploy to thegraph via</span></span><br><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><p>After waiting a while (minutes to even hours, depending on how complex your mapping handler is and how long your project exists), your subgraph should be synchronized. You can always check the latest status of your subgraph in the hosted service site (e.g. <a href="https://thegraph.com/hosted-service/subgraph/linear-protocol/linear-testnet">https://thegraph.com/hosted-service/subgraph/linear-protocol/linear-testnet</a>)</p><p><img src="https://i.imgur.com/jYfcRhp.png" alt=""></p><h2 id="4-Querying-Subgraphs"><a href="#4-Querying-Subgraphs" class="headerlink" title="4. Querying Subgraphs"></a>4. Querying Subgraphs</h2><p>Thanks for staying so long with us. :muscle: Now it’s time to query our subgraph!!!</p><p>You’ll need to <a href="https://graphql.org/learn/">learn a bit about <strong>GraphQL</strong></a> and <a href="https://thegraph.com/docs/en/developer/graphql-api/">The Graph’s GraphQL API</a> if you didn’t use it before.</p><p>We have at least two ways to query data:</p><ol><li>using the playground of your subgraph;</li><li>using the GraphQL client in your code</li></ol><h3 id="Query-with-Playground"><a href="#Query-with-Playground" class="headerlink" title="Query with Playground"></a>Query with Playground</h3><p>After deploying your subgraph and the sync is done, you’ll be able to query with the playground. (e.g. LiNEAR’s testnet subgraph: <a href="https://thegraph.com/hosted-service/subgraph/linear-protocol/linear-testnet">https://thegraph.com/hosted-service/subgraph/linear-protocol/linear-testnet</a>)</p><p><img src="https://i.imgur.com/DwT6lIf.png" alt=""></p><p>In the playground, you can edit, save and execute your GraphQL queries. </p><p>In the above screenshot, we have queried 100 users with the fields we’re interested in. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  users(first: 100) &#123;</span><br><span class="line">    id</span><br><span class="line">    mintedLinear</span><br><span class="line">    unstakedLinear</span><br><span class="line">    stakedNear</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Query-with-GraphQL-Client-in-Code"><a href="#Query-with-GraphQL-Client-in-Code" class="headerlink" title="Query with GraphQL Client in Code"></a>Query with GraphQL Client in Code</h3><p>Usually we’ll query subgraph in our application frontend and analytics/statistics tools. We can use any GraphQL client such as Apollo Client or URQL as suggested by <a href="https://thegraph.com/docs/en/developer/querying-from-your-app/">The Graph’s docs</a>. </p><p>Here we use <code>urql</code> library as an example.</p><p>(1) Get the GraphQL endpoint for our subgraph: <code>https://api.thegraph.com/subgraphs/name/&lt;username&gt;/&lt;subgraph_name&gt;</code></p><p>(2) Create the URQL client. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createClient &#125; = <span class="built_in">require</span>(<span class="string">&#x27;urql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="title function_">createClient</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: config.<span class="property">subgraph</span>.<span class="property">apiUrl</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(3) Query the subgraph with the URQL client. </p><p>Here we’d like to query the $LiNEAR price 30 days ago, so we can calculate the staking APY with it. You can find more query examples in the <a href="https://github.com/linear-protocol/linear-subgraph/blob/b13779eee7c233932b1ed58090c553b75464bdb6/test/price.js#L4-L23"><code>./test</code> folder</a>. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryPriceBefore</span>(<span class="params">timestamp</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> query = <span class="string">`</span></span><br><span class="line"><span class="string">      query &#123;</span></span><br><span class="line"><span class="string">        prices (first: 1, orderBy: timestamp, orderDirection: desc,</span></span><br><span class="line"><span class="string">          where: &#123;timestamp_lte: &quot;<span class="subst">$&#123;timestamp.toString()&#125;</span>&quot;&#125; )</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          id</span></span><br><span class="line"><span class="string">          timestamp</span></span><br><span class="line"><span class="string">          price</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;`</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> client.<span class="title function_">query</span>(query).<span class="title function_">toPromise</span>();</span><br><span class="line">  <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Failed to query price&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="property">prices</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can also get the latest $LiNEAR price from contract, and we already have queried the $LiNEAR price 30 days before now, we’ll be able to calculate the staking rewards with the formula <code>(price (now) - price (30 days ago)) / 30 * 365</code>. We finally make it!!!</p><p><em>P.S.</em> At LiNEAR Protocol, we have built a SDK based on the subgraph queries, which is used in our frontend and analytics. Please feel free to <a href="https://github.com/linear-protocol/linear-sdk">check out</a> if you’re intersted to build your own SDKs.</p><h2 id="It’s-time-to-BUIDL-now"><a href="#It’s-time-to-BUIDL-now" class="headerlink" title="It’s time to BUIDL now!!!"></a>It’s time to BUIDL now!!!</h2><p>Congratulations, my friend! :birthday: </p><p>You have learnt about the details of building subgraphs on NEAR with events, from implementing and emitting the events in your smart contract, to building, deploying and querying the subgraphs that process your events.</p><p>Besides this tutorial, there are other excellent guides that will help you learn more about using The Graph on NEAR.</p><ul><li><a href="https://thegraph.com/docs/en/supported-networks/near/">Building Subgraphs on NEAR</a></li><li><a href="https://github.com/dabit3/near-subgraph-workshop">Building an NFT API on NEAR with The Graph</a></li><li><a href="https://github.com/graphprotocol/example-subgraph/tree/near-receipts-example">Example NEAR Receipts Subgraph: Good Morning NEAR</a></li><li><a href="https://thegraph.com/docs/en/developer/quick-start/">Quick Start Guide of The Graph</a></li></ul><p>Now it’s your time to start building and hacking. If you have any questions, please feel free to <a href="https://github.com/linear-protocol/linear-subgraph/discussions">discuss with us in the <code>linear-protocol/linear-subgraph</code> repo</a>. Good luck!</p><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><h3 id="About-LiNEAR"><a href="#About-LiNEAR" class="headerlink" title="About LiNEAR"></a>About LiNEAR</h3><p>LiNEAR Protocol is a liquid staking solution built on the NEAR Protocol. LiNEAR unlocks liquidity of the staked NEAR by creating a staking derivative to be engaged with various DeFi protocols on NEAR and Aurora, while also enjoying over 10% APY staking rewards of the underlying base tokens. LiNEAR is the cornerstone of the NEAR-Aurora DeFi ecosystem.</p><h3 id="About-The-Graph"><a href="#About-The-Graph" class="headerlink" title="About The Graph"></a>About The Graph</h3><p>The Graph is the indexing and query layer of web3. Developers build and publish open APIs, called subgraphs, that applications can query using GraphQL. The Graph currently supports indexing data from 31 different networks including Ethereum, NEAR, Arbitrium, Optimism, Polygon, Avalanche, Celo, Fantom, Moonbeam, IPFS, and PoA with more networks coming soon. Developers build and publish open APIs, called subgraphs, that applications can query using GraphQL.</p><p><img src="https://i.imgur.com/yZSgnsT.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Building-Production-Ready-Subgraphs-on-NEAR&quot;&gt;&lt;a href=&quot;#Building-Production-Ready-Subgraphs-on-NEAR&quot; class=&quot;headerlink&quot; title=&quot;Buildi
      
    
    </summary>
    
    
      <category term="NEAR" scheme="https://dispa1r.github.io/tags/NEAR/"/>
    
      <category term="Graph" scheme="https://dispa1r.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>The Graph开发心得(NEAR)</title>
    <link href="https://dispa1r.github.io/2022/05/18/The-Graph%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97-NEAR/"/>
    <id>https://dispa1r.github.io/2022/05/18/The-Graph开发心得-NEAR/</id>
    <published>2022-05-18T09:45:29.000Z</published>
    <updated>2022-05-18T10:03:12.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用TheGraph开发链上数据索引的一些总结"><a href="#使用TheGraph开发链上数据索引的一些总结" class="headerlink" title="使用TheGraph开发链上数据索引的一些总结"></a>使用TheGraph开发链上数据索引的一些总结</h1><h2 id="映射部分"><a href="#映射部分" class="headerlink" title="映射部分"></a>映射部分</h2><ul><li>变量命名的坑：这个问题主要出在GraphQL上，graph在查询数据时，对于多条数据查询需要将查询的entity变成复数形式，所以在命名entity时最好需要避开结尾是s，es等情况。</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_d87e8d6c681ea72a2edf7dca45438e91.png" alt=""></p><ul><li>数据类型映射的问题：The Graph中的基础类型如下图，可以通过定义entity以及entity Array的形式得到任何复杂类型，文档中对于Int类型占用32个字节的说法存疑，BigDecimal可以保存浮点数，并且精度很高</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_ad874b487fae4c92e84f8ea3001cce4c.png" alt=""></p><ul><li>数据运算：对于Int,BigInt,BigDecimal等数据，graph已经完成了对这些数据类型的运算符的重载，具体支持的计算类型如下：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">namespace</span> bigInt &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">plus</span>(<span class="params">x: <span class="built_in">BigInt</span>, y: <span class="built_in">BigInt</span></span>): <span class="title class_">BigInt</span> <span class="comment">// +</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">minus</span>(<span class="params">x: <span class="built_in">BigInt</span>, y: <span class="built_in">BigInt</span></span>): <span class="title class_">BigInt</span> <span class="comment">// -</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">times</span>(<span class="params">x: <span class="built_in">BigInt</span>, y: <span class="built_in">BigInt</span></span>): <span class="title class_">BigInt</span> <span class="comment">// *</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">dividedBy</span>(<span class="params">x: <span class="built_in">BigInt</span>, y: <span class="built_in">BigInt</span></span>): <span class="title class_">BigInt</span> <span class="comment">// /</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">dividedByDecimal</span>(<span class="params">x: <span class="built_in">BigInt</span>, y: BigDecimal</span>): <span class="title class_">BigDecimal</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">mod</span>(<span class="params">x: <span class="built_in">BigInt</span>, y: <span class="built_in">BigInt</span></span>): <span class="title class_">BigInt</span> <span class="comment">// %</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">x: <span class="built_in">BigInt</span>, exp: u8</span>): <span class="title class_">BigInt</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fromString</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="title class_">BigInt</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bitOr</span>(<span class="params">x: <span class="built_in">BigInt</span>, y: <span class="built_in">BigInt</span></span>): <span class="title class_">BigInt</span> <span class="comment">// |</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bitAnd</span>(<span class="params">x: <span class="built_in">BigInt</span>, y: <span class="built_in">BigInt</span></span>): <span class="title class_">BigInt</span> <span class="comment">// &amp;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">leftShift</span>(<span class="params">x: <span class="built_in">BigInt</span>, bits: u8</span>): <span class="title class_">BigInt</span> <span class="comment">// &gt;&lt;&lt;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">rightShift</span>(<span class="params">x: <span class="built_in">BigInt</span>, bits: u8</span>): <span class="title class_">BigInt</span> <span class="comment">// &gt;&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关于entity的Array：graph的ArrayList本质上是一个string数组，里面保存的是目标entity的id，因此使用起来较为方便，在向Array作增量更新时直接使用array.push[entity]这种形式是无效的，需要将array原本的内容深拷贝一份后再添加元素，最后进行覆盖才是有效的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确用法：</span></span><br><span class="line"><span class="keyword">let</span> fromUser = <span class="title function_">getOrInitUser</span>(oldOwnerId);</span><br><span class="line"><span class="keyword">let</span> temp = fromUser.<span class="property">transferedOut</span>!;</span><br><span class="line">temp.<span class="title function_">push</span>(receiptHash);</span><br><span class="line">fromUser.<span class="property">transferedOut</span> = temp;</span><br><span class="line">fromUser.<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure><ul><li><p>谨慎使用const：在graph的处理中需要谨慎使用const，如果你可以确保你的graph在进行索引时只会使用到某些同名变量的一次，那么可以使用const，否则还是最好使用let或者var</p></li><li><p>关于handle的粒度：graph支持在receipt层和block层处理索引，需要注意的是跨合约调用的日志会分布在不同的receipt中，需要获取这些日志时，需要指定每个receipt中的函数名，下图是发生在一个区块中不同receipt的案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blockHandlers:</span><br><span class="line">        - handler: handleNewBlock # the function name in the mapping file</span><br><span class="line">receiptHandlers:</span><br><span class="line">        - handler: handleReceipt # the function name in the mapping file</span><br></pre></td></tr></table></figure><p><img src="https://hackmd.summershrimp.com/uploads/upload_c9a79904473c0cc160545087d35426ed.png" alt=""></p></li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_a44212bd6c7a98ef73d0e883342476ea.png" alt=""></p><ul><li><p>关于timeStamp：graph中的timeStamp是从区块中获取的而不是直接获取系统时间戳，这一点需要注意</p></li><li><p>关于id选取的一些经验：id是graph的entity中最重要的一个字段，一般来说需要索引的数据会离散的分布在不同的区块中，因此想要避免重复的id可以使用blockHash或者timeStamp，关于实现连续的id再下文中会介绍，下面是区块中的一些unique的信息，可以用来作为id，对于其中bytes类型的数据可以使用graph库中自带的base58编码后即可去浏览器中查询</p></li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_1be2fae75aed53ef44a82a75f1841c44.png" alt="base58编码后的receiptHash"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// block级</span><br><span class="line">class BlockHeader &#123;</span><br><span class="line">      height: u64,</span><br><span class="line">      epochId: Bytes,</span><br><span class="line">      hash: Bytes,</span><br><span class="line">      timestampNanosec: u64,</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line">//  receipt级</span><br><span class="line">class ExecutionOutcome &#123;</span><br><span class="line">      gasBurnt: u64,</span><br><span class="line">      blockHash: Bytes,</span><br><span class="line">      id: Bytes,</span><br><span class="line">      logs: Array&lt;string&gt;,</span><br><span class="line">      receiptIds: Array&lt;Bytes&gt;,</span><br><span class="line">      tokensBurnt: BigInt,</span><br><span class="line">      executorId: string,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>关于实现连续id：对于一些特殊的需求，比如说维护一个值的增长的全过程，此时就需要找到上一条记录的id，这种情况下可以用一个version结构去记录上一条记录的id，并且保存下一条记录的id，这种结构类似于链表，下面是一个最简单的version的实现：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">priceVersion.<span class="property">lastPriceID</span> = priceVersion.<span class="property">nextPriceID</span>;</span><br><span class="line">priceVersion.<span class="property">nextPriceID</span> = priceVersion.<span class="property">nextPriceID</span>.<span class="title function_">plus</span>(<span class="title class_">BigInt</span>.<span class="title function_">fromU32</span>(<span class="number">1</span>));</span><br><span class="line">priceVersion.<span class="property">latestPrice</span> = nextPrice.<span class="property">price</span>;</span><br><span class="line">priceVersion.<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure><ul><li>关于反向查询的一些思考和理解：反向查询本事上是在结构中加入一些虚拟的字段，通过这些字段可以进行反向查询，以NFT场景为例，某些地方需要查询NFT的所属者以及一个用户所持有的全部NFT，这种情况反向查询就显得格外有用，以superise的graph中的反向查询为例，可以这样理解，Array代表了一对多的映射，反向查询则可以代表了多对多的双向映射，完整代码可以在superise的graph仓库中找到</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">TwitterPool</span> @entity&#123;</span><br><span class="line">   <span class="attr">id</span>: <span class="variable constant_">ID</span>!</span><br><span class="line">   <span class="attr">name</span>: <span class="title class_">String</span>!</span><br><span class="line">   <span class="attr">describe</span>: <span class="title class_">String</span>!</span><br><span class="line">   <span class="attr">cover</span>: <span class="title class_">String</span>!</span><br><span class="line">   <span class="attr">status</span>: <span class="title class_">String</span>!</span><br><span class="line">   <span class="attr">end_time</span>: <span class="title class_">BigInt</span>!</span><br><span class="line">   <span class="attr">create_time</span>: <span class="title class_">BigInt</span>!</span><br><span class="line">   <span class="attr">update_time</span>: <span class="title class_">BigInt</span>!</span><br><span class="line">   <span class="attr">white_list</span>: [<span class="title class_">Account</span>!]</span><br><span class="line">   <span class="attr">requirement</span>: <span class="title class_">String</span></span><br><span class="line">   <span class="attr">twitter_link</span>: <span class="title class_">String</span>!</span><br><span class="line">   <span class="attr">winner_account</span>: [<span class="title class_">Account</span>!]</span><br><span class="line">   <span class="attr">winner_record</span>: [<span class="title class_">Record</span>!]</span><br><span class="line">   <span class="attr">creator_id</span>: <span class="title class_">Account</span>!</span><br><span class="line">   <span class="attr">ft_prize</span>: [<span class="variable constant_">FT</span>!]</span><br><span class="line">   <span class="attr">nft_prize</span>: [<span class="variable constant_">NFT</span>!]</span><br><span class="line">   <span class="attr">join_account</span>: [<span class="title class_">Account</span>!]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">type <span class="title class_">Account</span> @entity&#123;</span><br><span class="line">   <span class="attr">id</span>: <span class="variable constant_">ID</span>!</span><br><span class="line">   <span class="attr">name</span>: <span class="title class_">String</span>!</span><br><span class="line">   <span class="attr">joined_prize_pool</span>: [<span class="title class_">TwitterPool</span>!]  @<span class="title function_">derivedFrom</span>(<span class="attr">field</span>: <span class="string">&quot;join_account&quot;</span>)</span><br><span class="line">   <span class="attr">whitelist_pool</span>: [<span class="title class_">TwitterPool</span>!]  @<span class="title function_">derivedFrom</span>(<span class="attr">field</span>: <span class="string">&quot;white_list&quot;</span>)</span><br><span class="line">   <span class="attr">created_pool</span>: [<span class="title class_">TwitterPool</span>!] @<span class="title function_">derivedFrom</span>(<span class="attr">field</span>: <span class="string">&quot;creator_id&quot;</span>)</span><br><span class="line">   <span class="attr">winned_pool</span>: [<span class="title class_">TwitterPool</span>!] @<span class="title function_">derivedFrom</span>(<span class="attr">field</span>: <span class="string">&quot;winner_account&quot;</span>)</span><br><span class="line">   <span class="attr">winned_prize</span>: [<span class="title class_">Record</span>!] @<span class="title function_">derivedFrom</span>(<span class="attr">field</span>: <span class="string">&quot;receiver&quot;</span>)</span><br><span class="line">   <span class="attr">sender_activity</span>: [<span class="title class_">Activity</span>!] @<span class="title function_">derivedFrom</span>(<span class="attr">field</span>: <span class="string">&quot;sender&quot;</span>)</span><br><span class="line">   <span class="attr">recevier_activity</span>: [<span class="title class_">Activity</span>!] @<span class="title function_">derivedFrom</span>(<span class="attr">field</span>: <span class="string">&quot;receiver&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>合约中对于event的定义与使用：这种需要结合具体情况具体分析，也许可以针对不同的NEP的标准编写一套对应的graph的模板，或者开发一个event2graph的小工具，其实关于这个问题我之前就有了一些思考，具体可以点击这里看<a href="https://hackmd.summershrimp.com/iurKPePtTC6wJF8mPAvUuw">关于event2graph的一些思考</a></p></li><li><p>关于起始块的选择：通过在yaml文件中配置startBlock可以大大减少sync的耗时，但是如何选择一个起始块是一个比较有意思的问题，最严谨的方法就是使用浏览器查看account创建的时间，当然也可以选择合约发生第一笔交易的时间</p></li></ul><h2 id="部署部分"><a href="#部署部分" class="headerlink" title="部署部分"></a>部署部分</h2><p>部署部分其实相对来说坑比较少，除了graph不定时抽风之外lol</p><ul><li>pending与current version：这里要注意的是，当你试图重新覆盖掉已经sync完成的子图时，graph会自动创建一个pending版本，可以在playground的右上角进行版本的切换。</li></ul><h2 id="调试部分"><a href="#调试部分" class="headerlink" title="调试部分"></a>调试部分</h2><p>关于graph的debug其实一直是一个比较麻烦的问题，重新部署+sync的耗时过长，下面还是有一些小技巧帮助你进行调试：</p><ul><li><p>在一些结构中加入blockHash或者receiptHash，可以去浏览器快速定位到问题区块</p></li><li><p>如果你的graph不小心crash了，你可以在logs中找到出问题的区块高度，然后去分析其中的交易</p></li><li><p>在编写graph时一定要构造一个比较严谨的闭合的生命周期，否则经常会出现一些数据对不上的情况</p></li></ul><h2 id="数据可视化部分"><a href="#数据可视化部分" class="headerlink" title="数据可视化部分"></a>数据可视化部分</h2><p>与Google Sheet、Google Data Studio 联动：这部分主要是把query的脚本改成了Google App Script，这里基于这个<a href="https://towardsdatascience.com/how-to-create-a-ethereum-defi-realtime-dashboard-a60c23b527f7">链接</a>简单做了一个获取转账记录的脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDataGQL</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> url_query = <span class="string">&#x27;https://api.thegraph.com/subgraphs/name/ha4a4ck/linearmainnet&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> query = <span class="string">`&#123;</span></span><br><span class="line"><span class="string">    ftTransfers(first: 1000,skip: skip_param) &#123;</span></span><br><span class="line"><span class="string">      to &#123;</span></span><br><span class="line"><span class="string">        id</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      from &#123;</span></span><br><span class="line"><span class="string">        id</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      timestamp</span></span><br><span class="line"><span class="string">      amount</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;`</span></span><br><span class="line"></span><br><span class="line">  data = <span class="title function_">getApiData_</span>(url_query, query)</span><br><span class="line">  <span class="title function_">writeData_</span>(data)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Creates the query with the skip param to iterate all the borrows</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> the query to executed with the skip param replaced</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createOptions_</span>(<span class="params">query</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;contentType&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;payload&#x27;</span> : <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">query</span>: query&#125;) </span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Writes the data in the spreadsheet </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> matrix data to write</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writeData_</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="title class_">Logger</span>.<span class="title function_">log</span>(data.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">var</span> ss = <span class="title class_">SpreadsheetApp</span>.<span class="title function_">getActiveSpreadsheet</span>().<span class="title function_">getActiveSheet</span>();</span><br><span class="line">    ss.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">1</span>, data.<span class="property">length</span>, data[<span class="number">0</span>].<span class="property">length</span>).<span class="title function_">clear</span>()</span><br><span class="line">    ss.<span class="title function_">getRange</span>(<span class="number">2</span>, <span class="number">1</span>, data.<span class="property">length</span>, data[<span class="number">0</span>].<span class="property">length</span>).<span class="title function_">setValues</span>(data);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Gets the data from the api and transform the result </span></span><br><span class="line"><span class="comment">* getting the json data fields to a </span></span><br><span class="line"><span class="comment">* array to write in the spreadsheet</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getApiData_</span>(<span class="params">url_query, query</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> totalData = []</span><br><span class="line">  <span class="keyword">var</span> areData = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">var</span> skip = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(areData)&#123;</span><br><span class="line">    <span class="keyword">var</span> queryIter = query.<span class="title function_">replace</span>(<span class="string">&quot;skip_param&quot;</span>, skip.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="keyword">var</span> options = <span class="title function_">createOptions_</span>(queryIter)</span><br><span class="line">    <span class="keyword">var</span> response = <span class="title class_">UrlFetchApp</span>.<span class="title function_">fetch</span>(url_query, options)</span><br><span class="line">    <span class="keyword">var</span> json = response.<span class="title function_">getContentText</span>();</span><br><span class="line">    <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(json);</span><br><span class="line">    <span class="keyword">var</span> arrayData = data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;ftTransfers&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> grouped = arrayData.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> [ </span><br><span class="line">        e[<span class="string">&#x27;amount&#x27;</span>] / <span class="number">1e24</span>, </span><br><span class="line">        e[<span class="string">&#x27;to&#x27;</span>][<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">        e[<span class="string">&#x27;from&#x27;</span>][<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">        <span class="built_in">parseInt</span>(e[<span class="string">&#x27;timestamp&#x27;</span>] / <span class="number">1e6</span>)</span><br><span class="line">      ] </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    totalData.<span class="title function_">push</span>(...grouped)</span><br><span class="line">    skip += <span class="number">1000</span></span><br><span class="line">    </span><br><span class="line">    areData = arrayData.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> totalData</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后定义好trigger</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_119ca787dbe45696248c42f2518855ad.png" alt=""></p><p>接着就可以去data studio尽情玩耍数据了，链接在这里:<a href="https://datastudio.google.com/reporting/6a034c50-3732-46d6-ab94-a7144fe2a816">https://datastudio.google.com/reporting/6a034c50-3732-46d6-ab94-a7144fe2a816</a> ，后面看看怎么做一个有方向的动态图</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_b2b0acb81046ce857c02a929d2b033ee.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用TheGraph开发链上数据索引的一些总结&quot;&gt;&lt;a href=&quot;#使用TheGraph开发链上数据索引的一些总结&quot; class=&quot;headerlink&quot; title=&quot;使用TheGraph开发链上数据索引的一些总结&quot;&gt;&lt;/a&gt;使用TheGraph开发链上数据索
      
    
    </summary>
    
    
      <category term="NEAR" scheme="https://dispa1r.github.io/tags/NEAR/"/>
    
      <category term="Graph" scheme="https://dispa1r.github.io/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>Be a full stack hacker</title>
    <link href="https://dispa1r.github.io/2022/05/16/Be-a-full-stack-hacker/"/>
    <id>https://dispa1r.github.io/2022/05/16/Be-a-full-stack-hacker/</id>
    <published>2022-05-16T07:52:46.000Z</published>
    <updated>2022-05-18T10:03:20.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Make-a-dream"><a href="#Make-a-dream" class="headerlink" title="Make a dream"></a>Make a dream</h1><h2 id="Full-Stack"><a href="#Full-Stack" class="headerlink" title="Full Stack"></a>Full Stack</h2><p>争取在未来的日子里成为一个全栈开发者</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_352b96b3845d80f343bab91458a453ac.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Make-a-dream&quot;&gt;&lt;a href=&quot;#Make-a-dream&quot; class=&quot;headerlink&quot; title=&quot;Make a dream&quot;&gt;&lt;/a&gt;Make a dream&lt;/h1&gt;&lt;h2 id=&quot;Full-Stack&quot;&gt;&lt;a href=&quot;#Ful
      
    
    </summary>
    
    
      <category term="废话" scheme="https://dispa1r.github.io/tags/%E5%BA%9F%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>Build NEAR app with Airtable/Glide</title>
    <link href="https://dispa1r.github.io/2022/05/04/Build-NEAR-app-with-Airtable-Glide/"/>
    <id>https://dispa1r.github.io/2022/05/04/Build-NEAR-app-with-Airtable-Glide/</id>
    <published>2022-05-04T11:24:20.000Z</published>
    <updated>2022-05-04T11:24:56.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Build-NEAR-app-with-Airtable-Glide-Welcome-Track"><a href="#Build-NEAR-app-with-Airtable-Glide-Welcome-Track" class="headerlink" title="Build NEAR app with Airtable/Glide(Welcome Track)"></a>Build NEAR app with Airtable/Glide(Welcome Track)</h1><p>本次演示中代码已上传到git： <a href="https://github.com/Dispa1r/NEAR-aritable">https://github.com/Dispa1r/NEAR-aritable</a></p><h2 id="关于新手赛道"><a href="#关于新手赛道" class="headerlink" title="关于新手赛道"></a>关于新手赛道</h2><p>新手赛道主要针对那些想要把应用集成到区块链中，以及想要熟悉该技术的非区块链开发人员，也就是说web3.0的新人。</p><ul><li>号召博雅教育。我们非常缺少哲学家和历史学家、艺术家和插画家的意见，他们的思维方式不会被限制，如果这一挑战引起了您的共鸣，那么今天就来帮助我们展望未来。创作原创或衍生作品，传达有关网络未来的宝贵信息——这可以是一篇论文、一幅画、一首歌或独白。使用最有效的媒介去制作您的作品。</li></ul><h3 id="新手赛道选题"><a href="#新手赛道选题" class="headerlink" title="新手赛道选题"></a>新手赛道选题</h3><h2 id="Bootcamp"><a href="#Bootcamp" class="headerlink" title="Bootcamp"></a>Bootcamp</h2><p>一般来说，学习编程的作品中会伴随很多demo的产生，将demo改造成一个web3的作评显得就很酷。</p><ul><li>可以NEAR账户系统融入你的作评的身份认证系统中</li><li>可以将原本中心化的存储，以及一些API和服务，将数据、代码等迁移至NEAR智能合约中</li></ul><h2 id="Airtable"><a href="#Airtable" class="headerlink" title="Airtable"></a>Airtable</h2><p>下一代的Excel，一些特点</p><ul><li>支持多人协作</li><li>多种特色的view</li><li>支持使用rest API写入外部数据</li><li>支持web hook等</li><li>一系列的自动化提高工作效率</li><li>可以导入google sheet等多方数据来源</li><li>丰富的案例与模板可供使用</li><li>便捷的脚手架，可以生成大量的demo代码</li></ul><h4 id="作为前端使用"><a href="#作为前端使用" class="headerlink" title="作为前端使用"></a>作为前端使用</h4><p>Airtable可以作为前端使用，在View中选择Form View，接着把表单链接分享给其他用户，那么你就得到了一个简易的前端。</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_9d1a7bb17f00c904232b1ce53ba36f9a.png" alt=""></p><p>在airtable被写入数据后，使用automation工具调用封装好合约功能的API server即可实现数据的同步。</p><h4 id="作为后端使用"><a href="#作为后端使用" class="headerlink" title="作为后端使用"></a>作为后端使用</h4><p>Airtable也可以被看成一个简易的数据库中使用，通过JS bridge打通Airtable与合约之间的数据桥梁，也可以实现两者之间的数据同步。</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_673155806cc56e02132882db69829f9e.png" alt=""></p><h2 id="NEAR-API-JS"><a href="#NEAR-API-JS" class="headerlink" title="NEAR API JS"></a>NEAR API JS</h2><p>利用API JS作为桥梁，打通Airtable和NEAR智能合约之间的数据流通，并且实现读写的原子性。引入airtable API与NEAR-API-JS，可以实现合约数据的可视化。</p><h2 id="其他选择"><a href="#其他选择" class="headerlink" title="其他选择"></a>其他选择</h2><ul><li>Glide：快速构建app，实现table数据的可视化，缺点：不支持使用API/SDK进行外部数据的读写，Glide在不久的将来也会支持Airtable作为data source，利用Glide与data source可以快速构建应用。</li><li>Google sheet：提供多种语言API，内置丰富的脚本，通过编写脚本可以实现特定板机触发时执行特定的任务。</li><li>AppSheet：Google提供的简易通过Google sheet构建App的工具，可以完美实现与Google sheet数据的流通。</li></ul><p><img src="https://hackmd.summershrimp.com/uploads/upload_b068e12692fd3e86455a66740d27ce2b.png" alt=""></p><h2 id="数据的binding"><a href="#数据的binding" class="headerlink" title="数据的binding"></a>数据的binding</h2><p>如何实现Table中数据与合约中数据的同步是一个问题，</p><ul><li>Glide 导入Google sheet的话，可以自动实现两者数据的同步</li><li>AirTable的话导入Google sheet之后，两者数据是独立的</li></ul><p>数据流：</p><ul><li>Contract -&gt; AirTable 可以通过js的方式实现数据的同步</li><li>Contract -&gt; Google Sheet 同上</li><li>AirTable -&gt; Contract 可以通过JS？或者email server，待探讨</li><li>GoogleSheet -&gt; Contract 参考Google Sheet script</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://airtable.com/api">https://airtable.com/api</a></li><li><a href="https://developers.google.com/apps-script/guides/sheets/connected-sheets">https://developers.google.com/apps-script/guides/sheets/connected-sheets</a></li><li><a href="https://go.glideapps.com/">https://go.glideapps.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Build-NEAR-app-with-Airtable-Glide-Welcome-Track&quot;&gt;&lt;a href=&quot;#Build-NEAR-app-with-Airtable-Glide-Welcome-Track&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="NEAR" scheme="https://dispa1r.github.io/tags/NEAR/"/>
    
  </entry>
  
  <entry>
    <title>Build a telegram red packet bot</title>
    <link href="https://dispa1r.github.io/2022/05/04/Build-a-telegram-red-packet-bot/"/>
    <id>https://dispa1r.github.io/2022/05/04/Build-a-telegram-red-packet-bot/</id>
    <published>2022-05-04T11:04:21.000Z</published>
    <updated>2022-05-04T11:05:08.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-to-write-a-telegram-red-packect-bot-on-NEAR"><a href="#How-to-write-a-telegram-red-packect-bot-on-NEAR" class="headerlink" title="How to write a telegram red packect bot on NEAR"></a>How to write a telegram red packect bot on NEAR</h1><p>In this tutorial, i will show you how to write a telegram red packect of near. There will be two parts, the contract and the robot part :)</p><h2 id="Ready-to-work"><a href="#Ready-to-work" class="headerlink" title="Ready to work"></a>Ready to work</h2><p>Before develop on near, you should have a testnet account to deploy and call the contract. You can register it at <a href="https://wallet.testnet.near.org/">NEAR testnet</a>.</p><p>And then, you should have <code>near-cli</code> and rust tool chain on your computer.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># install rust tool chain</span><br><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class="line">rustup target add wasm32-unknown-unknown</span><br><span class="line"># install near-cli</span><br><span class="line">npm install near-cli -g</span><br><span class="line"># login the near account</span><br><span class="line">near login</span><br></pre></td></tr></table></figure><h2 id="Contract"><a href="#Contract" class="headerlink" title="Contract"></a>Contract</h2><p>You may need a little experience in rust development, but if you are someone who is not familiar with the rust language, but has a certain foundation of object-oriented programming, you don’t need to worry, because the contract code becomes very readable with the help of comments。</p><p>First we can find there has been a linkdrop contract deployed on both near testnet and mainnet. And we can find the repo of linkdrop <a href="https://github.com/near/near-linkdrop">here</a>.</p><p>First, we need to to analyse the code of contract. First, we need to understand how it stores the data. We should read the struct part first.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#[near_bindgen]</span><br><span class="line">#[derive(Default, BorshDeserialize, BorshSerialize)]</span><br><span class="line">pub struct LinkDrop &#123;</span><br><span class="line">    pub accounts: Map&lt;PublicKey, Balance&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The contract uses a map to store the public key and balance, it means how many near can someone who owns the private key corresponding to the public key get.Let us analyse the send function first :).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#[payable]</span><br><span class="line">pub fn send(&amp;mut self, public_key: Base58PublicKey) -&gt; Promise &#123;</span><br><span class="line">    assert!(</span><br><span class="line">        env::attached_deposit() &gt; ACCESS_KEY_ALLOWANCE,</span><br><span class="line">        &quot;Attached deposit must be greater than ACCESS_KEY_ALLOWANCE&quot;</span><br><span class="line">    );</span><br><span class="line">    let pk = public_key.into();</span><br><span class="line">    let value = self.accounts.get(&amp;pk).unwrap_or(0);</span><br><span class="line">    // insert the public key and balance into contract</span><br><span class="line">    self.accounts.insert(</span><br><span class="line">        &amp;pk,</span><br><span class="line">        &amp;(value + env::attached_deposit() - ACCESS_KEY_ALLOWANCE),</span><br><span class="line">    );</span><br><span class="line">    // the call back function</span><br><span class="line">    Promise::new(env::current_account_id()).add_access_key(</span><br><span class="line">        pk,</span><br><span class="line">        ACCESS_KEY_ALLOWANCE,</span><br><span class="line">        env::current_account_id(),</span><br><span class="line">        b&quot;claim,create_account_and_claim&quot;.to_vec(),</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can see that the parameter of the call is a public key, so before we call this function, we need to use near sdk to create a valid near key pair, and we seed the public key to the contract, give the private key to the people who we want to give the linkdrop. Let us see what the <code>add_access_key</code> function does.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/// Add an access key that is restricted to only calling a smart contract on some account using</span><br><span class="line">/// only a restricted set of methods. Here `method_names` is a comma separated list of methods,</span><br><span class="line">/// e.g. `b&quot;method_a,method_b&quot;`.</span><br><span class="line">pub fn add_access_key(</span><br><span class="line">    self,</span><br><span class="line">    public_key: PublicKey,</span><br><span class="line">    allowance: Balance,</span><br><span class="line">    receiver_id: AccountId,</span><br><span class="line">    method_names: Vec&lt;u8&gt;,</span><br><span class="line">) -&gt; Self &#123;</span><br><span class="line">    self.add_action(PromiseAction::AddAccessKey &#123;</span><br><span class="line">        public_key,</span><br><span class="line">        allowance,</span><br><span class="line">        receiver_id,</span><br><span class="line">        method_names,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This function will add a access key to the contract account. Public_key is the key we just created, people who use the corresponding private key to sign the transaction could call the <code>claim</code> function and <code>create_account_and_claim</code> function. So we can know the linkdrop contract use a keypair to confirm the safety of the linkdrop. People who owns the private key could get the balance of the drop.</p><h2 id="a-little-upgrade"><a href="#a-little-upgrade" class="headerlink" title="a little upgrade"></a>a little upgrade</h2><p>We can see that now the contract only can give one people linkdrop, maybe we could make it more cool. We can transform the contract to allow multiple users to receive the same red envelope, it’s the same as WeChat’s lucky red envelope. So we should add some different functions.</p><p>First, we should change the parameter: from single <code>Base58PublicKey</code> to a vector <code>Vec&lt;Base58PublicKey&gt;</code>, and set how many people can receive. Then we just need to change adding a record to the map from before to add multiple records. So, the <code>sendLuck</code> function should become as following:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pub fn send_luck(&amp;mut self, public_key: Vec&lt;Base58PublicKey&gt;, num: u128) -&gt; Promise &#123;</span><br><span class="line">        assert!(</span><br><span class="line">            env::attached_deposit() &gt; ACCESS_KEY_ALLOWANCE * num,</span><br><span class="line">            &quot;Attached deposit must be greater than ACCESS_KEY_ALLOWANCE&quot;</span><br><span class="line">        );</span><br><span class="line">        let mut copy = public_key;</span><br><span class="line">        let mut number = 0;</span><br><span class="line">        let mut person = num;</span><br><span class="line">        // evenly divide the balance</span><br><span class="line">        let mut avgAmount = remain_num / person;</span><br><span class="line">        while number != num &#123;</span><br><span class="line">            let pk   = copy.pop().unwrap().into();</span><br><span class="line">            let value = self.accounts.get(&amp;pk).unwrap_or(0);</span><br><span class="line">            let third = v.pop();</span><br><span class="line">            self.accounts.insert(</span><br><span class="line">                &amp;pk,</span><br><span class="line">                avgAmount),</span><br><span class="line">            );</span><br><span class="line">            Promise::new(env::current_account_id()).add_access_key(</span><br><span class="line">                pk,</span><br><span class="line">                ACCESS_KEY_ALLOWANCE,</span><br><span class="line">                env::current_account_id(),</span><br><span class="line">                b&quot;claim,create_account_and_claim&quot;.to_vec(),</span><br><span class="line">            );</span><br><span class="line">            number += 1;</span><br><span class="line">        &#125;</span><br><span class="line">        Promise::new(env::current_account_id())</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>But we should make the game more exciting. We should make the amount of red envelopes received by everyone random. At the same time, the amount of red envelopes received by each person should be satisfied with the mean distribution. </p><p>Therefore, we can implement a double mean method, but the random number part may be unfortunate. In order to meet the consensus, there is no real random number on the blockchain, but you can rely on the oracle of <code>chainlink</code> to obtain a secure random number. However, the NEAR chain currently does not support <code>chainlink</code>. We believe in that it should be possible to use <code>chainlink</code> NEAR in the near future, so we use <code>block_timeStamp</code> to get a pseudo-random number.</p><p>So the code after upgrading should be like this:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#[payable]</span><br><span class="line">   pub fn send_luck(&amp;mut self, public_key: Vec&lt;Base58PublicKey&gt;, num: u128) -&gt; Promise &#123;</span><br><span class="line">       assert!(</span><br><span class="line">           env::attached_deposit() &gt; ACCESS_KEY_ALLOWANCE * num,</span><br><span class="line">           &quot;Attached deposit must be greater than ACCESS_KEY_ALLOWANCE&quot;</span><br><span class="line">       );</span><br><span class="line">       let mut copy = public_key;</span><br><span class="line">       let mut number = 0;</span><br><span class="line">       let mut remain_num = env::attached_deposit() - num * ACCESS_KEY_ALLOWANCE;</span><br><span class="line">       let mut v:Vec&lt;u128&gt; = Vec::new();</span><br><span class="line">       let mut person = num;</span><br><span class="line">       while number != num-1 &#123;</span><br><span class="line">           let mut avgAmount = remain_num / person;</span><br><span class="line">           let mut doubleAvgAmount = avgAmount * 2;</span><br><span class="line">           person -= 1;</span><br><span class="line">           let mut min = ACCESS_MIN_MONEY;</span><br><span class="line">           let mut max = doubleAvgAmount ;</span><br><span class="line">           let mut rand = MyRandomGenerator::default();</span><br><span class="line">           let mut timestamp = env::block_timestamp() as u128;</span><br><span class="line">           timestamp = timestamp % 100;</span><br><span class="line">           let mut currentAmount   =(rand.gen::&lt;u128&gt;() / timestamp) % max + min ;</span><br><span class="line">           v.push(currentAmount);</span><br><span class="line">           remain_num = remain_num - currentAmount;</span><br><span class="line">           number += 1;</span><br><span class="line">       &#125;</span><br><span class="line">       v.push(remain_num);</span><br><span class="line">       number = 0;</span><br><span class="line">       while number != num &#123;</span><br><span class="line">           let pk   = copy.pop().unwrap().into();</span><br><span class="line">           let value = self.accounts.get(&amp;pk).unwrap_or(0);</span><br><span class="line">           let third = v.pop();</span><br><span class="line">           self.accounts.insert(</span><br><span class="line">               &amp;pk,</span><br><span class="line">               &amp;(value + third.unwrap()),</span><br><span class="line">           );</span><br><span class="line">           Promise::new(env::current_account_id()).add_access_key(</span><br><span class="line">               pk,</span><br><span class="line">               ACCESS_KEY_ALLOWANCE,</span><br><span class="line">               env::current_account_id(),</span><br><span class="line">               b&quot;claim,create_account_and_claim&quot;.to_vec(),</span><br><span class="line">           );</span><br><span class="line">           number += 1;</span><br><span class="line">       &#125;</span><br><span class="line">       Promise::new(env::current_account_id())</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>Aha, we just finished to upgrade the contract, we don’t need to change the claim function beacuse we don’t change the storage structure.</p><h2 id="call-the-contract"><a href="#call-the-contract" class="headerlink" title="call the contract"></a>call the contract</h2><p>Due to space reasons, how to install and use near-js-sdk will not be introduced here, I will directly show how to call our contract in the node-js environment.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">// deploy contract function</span><br><span class="line">async function deployContract() &#123;</span><br><span class="line">    const near = await connect(config);</span><br><span class="line">    const account = await near.account(&quot;dispa1r.testnet&quot;);</span><br><span class="line">    const response = await account.deployContract(fs.readFileSync(&#x27;./linkdrop.wasm&#x27;));</span><br><span class="line">    console.log(response);</span><br><span class="line">&#125;</span><br><span class="line">const public_key = [];</span><br><span class="line">const nearPriAccount = [];</span><br><span class="line"></span><br><span class="line">## generate multiple keypair</span><br><span class="line">async function createKeyPair(newAccountId, num) &#123;</span><br><span class="line">    const keyStore1 = new keyStores.UnencryptedFileSystemKeyStore(&quot;./&quot;);</span><br><span class="line">    //const creatorAccount = await near.account(creatorAccountId);</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; num; i++) &#123;</span><br><span class="line">        const keyPair = KeyPair.fromRandom(&quot;ed25519&quot;);</span><br><span class="line">        await keyStore1.setKey(config.networkId, newAccountId + i, keyPair);</span><br><span class="line">        const KEY_PATH = &#x27;./testnet/&#x27; + newAccountId + i + &quot;.json&quot;;</span><br><span class="line">        const credentials = JSON.parse(fs.readFileSync(KEY_PATH));</span><br><span class="line">        //keyStore.setKey(NETWORK_ID, ACCOUNT_ID, KeyPair.fromString(credentials.private_key));</span><br><span class="line">        public_key.push(keyPair.publicKey.toString().replace(&#x27;ed25519:&#x27;, &#x27;&#x27;));</span><br><span class="line">        nearPriAccount.push(credentials.private_key.replace(&#x27;ed25519:&#x27;, &#x27;&#x27;));</span><br><span class="line">    &#125;</span><br><span class="line">    //console.log(public_key);</span><br><span class="line">    console.log(nearPriAccount);</span><br><span class="line">    //await keyStore.setKey(config.networkId, &quot;testnmsl1.testnet&quot;, keyPair)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function getContract(viewMethods = [], changeMethods = [], secretKey) &#123;</span><br><span class="line">    const near = await connect(config);</span><br><span class="line">    if (secretKey) &#123;</span><br><span class="line">        await keyStore.setKey(</span><br><span class="line">            NETWORK_ID, &quot;dispa1r.testnet&quot;,</span><br><span class="line">            nearAPI.KeyPair.fromString(secretKey)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    const tmpAccount = await near.account(&quot;dispa1r.testnet&quot;);</span><br><span class="line">    const contract = new nearAPI.Contract(tmpAccount, &quot;dispa1r.testnet&quot;, &#123;</span><br><span class="line">        viewMethods,</span><br><span class="line">        changeMethods,</span><br><span class="line">        sender: &quot;dispa1r.testnet&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    return contract</span><br><span class="line">&#125;</span><br><span class="line">async function getContract1(viewMethods = [], changeMethods = []) &#123;</span><br><span class="line">    const near = await connect(config);</span><br><span class="line">    const tmpAccount = await near.account(&quot;dispa1r.testnet&quot;);</span><br><span class="line">    const signAccount = await near.account(&quot;dispa1r1.testnet&quot;);</span><br><span class="line">    const contract1 = new nearAPI.Contract(tmpAccount, &quot;dispa1r.testnet&quot;, &#123;</span><br><span class="line">        viewMethods,</span><br><span class="line">        changeMethods,</span><br><span class="line">        sender: tmpAccount</span><br><span class="line">    &#125;)</span><br><span class="line">    return contract1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// beginning send function</span><br><span class="line">async function callSend(public_key, deposit) &#123;</span><br><span class="line">    const contract = await getContract1([], [&#x27;send&#x27;])</span><br><span class="line">    const depositNum = toNear(deposit)</span><br><span class="line">    await contract.send(&#123;</span><br><span class="line">            public_key,</span><br><span class="line">        &#125;, 200000000000000, depositNum)</span><br><span class="line">        .then(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;Drop claimed&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((e) =&gt; &#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">            console.log(&#x27;Unable to claim drop. The drop may have already been claimed.&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// send Luck version</span><br><span class="line">async function callSendLuck(nearAmount, num) &#123;</span><br><span class="line">    await createKeyPair(&quot;test.testnet&quot;, num);</span><br><span class="line">    const contract = await getContract1([], [&#x27;send_luck&#x27;])</span><br><span class="line">    const deposit = toNear(nearAmount);</span><br><span class="line">    //console.log(public_key);</span><br><span class="line">    await contract.send_luck(&#123;</span><br><span class="line">            public_key,</span><br><span class="line">            num,</span><br><span class="line">        &#125;, 200000000000000, deposit)</span><br><span class="line">        .then(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;Drop claimed&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((e) =&gt; &#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">            console.log(&#x27;Unable to claim drop. The drop may have already been claimed.&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function claimDrop(account_id, privKey) &#123;</span><br><span class="line">    const contract = await getContract([], [&#x27;claim&#x27;, &#x27;create_account_and_claim&#x27;], privKey)</span><br><span class="line">        // return funds to current user</span><br><span class="line">    await contract.claim(&#123;</span><br><span class="line">            account_id,</span><br><span class="line">        &#125;, 200000000000000)</span><br><span class="line">        .then(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;Drop claimed&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((e) =&gt; &#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">            console.log(&#x27;Unable to claim drop. The drop may have already been claimed.&#x27;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Robot-part"><a href="#Robot-part" class="headerlink" title="Robot part"></a>Robot part</h2><p>I do not intend to introduce the robot part in detail, because I used someone else’s golang-based telegram robot framework. It is very simple. You can find all of my code on github. If you have any questions, you can directly send me a private message via Twitter.</p><p>I think i should briefly introduce the robot-related code, i just make some comments.</p><p>The way I implemented it is very inelegant, because near does not have go-api, but in fact you can choose api-server, but I didn’t know these at the time, so I chose to go through near-js-api and go. I calling the command line command to implement the call contract. You can see the related code in <code>utils.go</code> and the js code in <code>test.js</code>.</p><p>In my robot, people only could send red packet after sign in and deposit near to the robot account, so i write a simple spider to check the transaction of deposit.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">b.Handle(&quot;/deposit&quot;,func(m *tb.Message) &#123;</span><br><span class="line">b.Send(m.Sender, &quot;please transfer to the near account:dispa1r.testnet&quot;)</span><br><span class="line">b.Send(m.Sender, &quot;after transfer, please input your txn hash&quot;)</span><br><span class="line">b.Send(m.Sender, &quot;the deposit must be bigger than 1 near&quot;)</span><br><span class="line">b.Handle(tb.OnText, func(m *tb.Message) &#123;</span><br><span class="line">// all the text messages that weren&#x27;t</span><br><span class="line">// captured by existing handlers</span><br><span class="line">url := &quot;https://explorer.testnet.near.org/transactions/&quot; + m.Text</span><br><span class="line">result := Get(url)</span><br><span class="line">//fmt.Println(result)</span><br><span class="line">reg1 := regexp.MustCompile(`&quot;receiverId&quot;:&quot;(?s:(.*?)).testnet&quot;,`)</span><br><span class="line">result1 := reg1.FindAllStringSubmatch(result, -1)</span><br><span class="line">receiverId := result1[0][1]</span><br><span class="line">reg2 := regexp.MustCompile(`&quot;deposit&quot;:&quot;(?s:(.*?))&quot;,`)</span><br><span class="line">result1 = reg2.FindAllStringSubmatch(result, -1)</span><br><span class="line">tmp := result1[0][1]</span><br><span class="line">numOnly := strings.TrimSuffix(tmp, &quot;\&quot;&#125;&#125;],\&quot;status\&quot;:\&quot;SuccessValue&quot;)</span><br><span class="line">var numOnly1 string</span><br><span class="line">numOnly1 = strings.TrimSuffix(numOnly, &quot;0000000000000000000000&quot;)</span><br><span class="line">num,err := strconv.Atoi(numOnly1)</span><br><span class="line">num1 := float64(num)/100</span><br><span class="line">if err!=nil || num &lt;100&#123;</span><br><span class="line">b.Send(m.Sender, &quot;invalid number&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">if receiverId != &quot;dispa1r&quot; &#123;</span><br><span class="line">b.Send(m.Sender, &quot;invalid transaction&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">err = common.GenerateTxn(m.Text)</span><br><span class="line">if err !=nil&#123;</span><br><span class="line">b.Send(m.Sender, &quot;invalid transaction&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">common.DepositMoney(m.Sender.ID, num1)</span><br><span class="line">num2 := strconv.FormatFloat(num1,&#x27;f&#x27;,5,32)</span><br><span class="line">str3 := &quot;success to deposit &quot;+num2+&quot; near&quot;</span><br><span class="line">b.Send(m.Sender, str3)</span><br><span class="line">return</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Then is the <code>send_luck</code> function and the <code>claim</code> function.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">b.Handle(&quot;/lucky&quot;,func(m *tb.Message) &#123;</span><br><span class="line">//chat := m.Chat</span><br><span class="line">b.Send(m.Sender, &quot;input the number of the near:&quot;)</span><br><span class="line">var amount float64</span><br><span class="line"></span><br><span class="line">b.Handle(tb.OnText, func(m *tb.Message) &#123;</span><br><span class="line">amount,err = strconv.ParseFloat(m.Text,10)</span><br><span class="line">result := common.CheckIfHave(m.Sender.ID,amount)</span><br><span class="line">if err !=nil || !result&#123;</span><br><span class="line">b.Send(m.Sender, &quot;invalid number, please go to deposit&quot;)</span><br><span class="line">&#125;</span><br><span class="line">b.Send(m.Sender, &quot;input the number of the red-packets:&quot;)</span><br><span class="line">b.Handle(tb.OnText, func(m *tb.Message) &#123;</span><br><span class="line">var num int</span><br><span class="line">num,err = strconv.Atoi(m.Text)</span><br><span class="line">if err !=nil&#123;</span><br><span class="line">b.Send(m.Sender, &quot;invalid number&quot;)</span><br><span class="line">&#125;</span><br><span class="line">var privateKey []string</span><br><span class="line">err,privateKey = CallSendLuckCmd(amount,num)</span><br><span class="line">if err!=nil&#123;</span><br><span class="line">common.SendLuck(m.Sender.ID,amount)</span><br><span class="line">&#125;</span><br><span class="line">b.Send(m.Sender, &quot;success to call the send luck,now give u the private key&quot;)</span><br><span class="line">for i := range privateKey&#123;</span><br><span class="line">b.Send(m.Sender, privateKey[i])</span><br><span class="line">&#125;</span><br><span class="line">return</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">b.Handle(&quot;/claim&quot;,func(m *tb.Message) &#123;</span><br><span class="line">b.Send(m.Sender, &quot;please input the private key to claim the drop&quot;)</span><br><span class="line">result := common.CheckBinded(m.Sender.ID)</span><br><span class="line">if !result&#123;</span><br><span class="line">b.Send(m.Sender,&quot;please first bind the near account&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">b.Handle(tb.OnText, func(m *tb.Message) &#123;</span><br><span class="line">privateKey := m.Text</span><br><span class="line">accountId := common.GetAccountId(m.Sender.ID)</span><br><span class="line">err = CallClaim(accountId,privateKey)</span><br><span class="line">//result := common.CheckIfHave(m.Sender.ID,amount)</span><br><span class="line">if err !=nil || !result&#123;</span><br><span class="line">b.Send(m.Sender, &quot;fail to claim the drop&quot;)</span><br><span class="line">&#125;</span><br><span class="line">b.Send(m.Sender, &quot;success to claim the drop!&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>repo address : <a href="https://github.com/Dispa1r/NearLuckyRobot">Disp41r lucky robot</a></p><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>If you are not familiar with the rust language, or even programming, then don’t worry, you can go to github to find other people’s code. </p><p>There are many interesting contracts in near-example, and they are also very helpful for you to learn how to develop on near. </p><p>After understanding the contract, try to modify it, then compile and deploy, gradually you will find that your understanding of it will be deeper. All in all, there is only one sentence, the industry is good at diligence, and more hands-on operations will make you become stronger.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;How-to-write-a-telegram-red-packect-bot-on-NEAR&quot;&gt;&lt;a href=&quot;#How-to-write-a-telegram-red-packect-bot-on-NEAR&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="NEAR" scheme="https://dispa1r.github.io/tags/NEAR/"/>
    
      <category term="Telegram bot" scheme="https://dispa1r.github.io/tags/Telegram-bot/"/>
    
  </entry>
  
  <entry>
    <title>联盟链跨链方案构想</title>
    <link href="https://dispa1r.github.io/2022/05/04/%E8%81%94%E7%9B%9F%E9%93%BE%E8%B7%A8%E9%93%BE%E6%96%B9%E6%A1%88%E6%9E%84%E6%83%B3/"/>
    <id>https://dispa1r.github.io/2022/05/04/联盟链跨链方案构想/</id>
    <published>2022-05-04T10:40:05.000Z</published>
    <updated>2022-05-04T10:41:47.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链上计算结果正确性"><a href="#链上计算结果正确性" class="headerlink" title="链上计算结果正确性"></a>链上计算结果正确性</h1><p>主要解决的问题是验证链上计算结果的真实性，由于联盟链本身没有PoW和PoS之类的共识算法，因此可以使用以太坊之类的公链（结点多，共识算法可靠）的智能合约去监管联盟链上合约的计算结果。<br><span id="more"></span></p><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><p>LP问题的数据来源是区块链账本，账本中的数据可以由多个结点写入，写入数据时，数据格式为{Id：data}的格式，data可以为单个整数，也可以是数组。</p><h2 id="LP求解"><a href="#LP求解" class="headerlink" title="LP求解"></a>LP求解</h2><p>求解LP问题时，第一步是从账本中取数据，然后计算LP问题和其对偶问题，然后将计算结果和使用到的数据来源上传到其他合约中，可以以json的形式传输数据，在公链的合约中可以以哈希表之类的形式存储以进行快速查找和索引，哈希表的key是唯一指定id（可以来源于时间戳或者fabric目前的区块高度，方便进行溯源），哈希表的value是序列化后的计算数据，其中要存储的关键字段有LP问题的解和对偶问题的解，LP问题的数据来源（可以只存Id，也可也Id和data一起存），其他合约需要进行监管时，可以从本地合约中存储的数据进行计算校验。<br>其中校验部分分为三种情况，第一种是feasible，也就是说c <em> x严格等于b </em> y（已完成），对于infeasible的情况，给出的proof中包含原问题辅助问题的解，如果辅助问题最优值为0，那么说明原问题有解。</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_8382efa59dc0b643341cb2fa503ac16d.png" alt=""></p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><ul><li>校验正确率，因为go语言的原因，对偶问题的解和原本的解有较小的误差，这个可以作为一个正确率的评判因素</li><li>对比链上计算结果耗时与校验耗时</li><li>对比直接从监管结点查询数据与直接从联盟链合约中取数据耗时</li><li>对比下主动上传数据与监管结点去取数据的复杂度</li><li>对比求解的LP问题的规模所需要的耗时，从小到大</li></ul><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h2 id="云端结点主动取数据"><a href="#云端结点主动取数据" class="headerlink" title="云端结点主动取数据"></a>云端结点主动取数据</h2><p>云端区块链主动去取数据，构建图或者树，或者KV？如果以{K:timeStamp;V:Data}的格式去存储数据，当云端区块链去联盟链取数据时，可能没法知道存储数据的时间，从而没法取到数据。</p><h2 id="另一种方案"><a href="#另一种方案" class="headerlink" title="另一种方案"></a>另一种方案</h2><p>借助一个监管结点，监管结点是位于联盟链那端的，云端区块链发出监管请求时，云端区块链的链码会去调用监管结点，从而获取到形如{K:timeStamp;V:data}的数据，然后数据传送到云端链码中进行校验，并且把校验结果写入云端的链中</p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><ul><li>求解效率问题：因为链码实际上是一个docker的形式运行，并且docker的性能参数无法修改，因此求解速度很慢</li><li>数据解的问题:目前构造的数据，5<em>10矩阵，1000次测试中，600次是有解的，但是一旦矩阵规模10 </em> 100，就只有50组左右是有解的。</li><li></li></ul><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul><li>求解对偶问题时，是否有计算优化空间</li><li>是否有更好的方法存储数据</li><li>更优雅的监管，比如说以代理合约的形式，这样就不需要去修改原本合约</li></ul><h2 id="方案-2021-11-3"><a href="#方案-2021-11-3" class="headerlink" title="方案 2021.11.3"></a>方案 2021.11.3</h2><ul><li>1 被监管链结点将数据写入账本，格式为 id:data，id是唯一标识符</li><li>2 当需要计算时，合约从账本中取出数据，进行LP计算，并且把计算的结果以{timeStamp:data}的格式写入区块链账本，其中data包括LP问题的参数和解，（可以尝试下默克尔树，好处是可保证在传输过程中数据的安全性）</li><li>3 当监管链请求监管数据时，监管客户端收到监管请求后，通过调用嵌入的监管合约从账本中取出LP计算写入的数据，并且上传到监管链</li><li>4 监管链的合约收到数据之后，进行校验运算之后将校验结果以{timeStamp:result}的形式写入监管链账本，如果发现计算结果不正确，监管合约则会通知监管客户端</li></ul><p>新版本架构图：</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_148a477ae114825cfd8ad65f02f8249d.png" alt=""></p><p>可以进行的对比实验：</p><ul><li>监管客户端使用{timeStamp:data}备份计算数据与不备份数据直接遍历查找的对比</li><li>两种模式：监管链主动索取数据与被监管链主动调用监管链的校验合约的优缺点以及效率</li></ul><h2 id="2021-11-11方案"><a href="#2021-11-11方案" class="headerlink" title="2021.11.11方案"></a>2021.11.11方案</h2><ul><li>1 被监管链中由数据生成的合约将数据写入账本，格式为{id:data}，其中id是自增的唯一标识符</li><li>2 当被监管链需要计算时，会按照id从小到大的顺序，以此取出数据，用来构建出解决LP问题所需要的A，c，b，然后进求解，如果有最优值，那么则接着计算对偶问题，最终把原问题的解x和对偶问题的解y，以{timeStamp:[x,y]}的格式写入账本之中，其中x和y是含有多个0的向量，可以将x和y组成一个稀疏矩阵后压缩存储，减少存储和通信上的开销</li><li>3 在计算完成之后，会将计算的参数A,c,b数据以{timeStamp(和上面的timeStamp是同一个值):[Id(A),Id(c),Id(b)]}的格式写入账本之中做溯源用，由于A,c，b都是大小比较相近的index，可以用整体加上或者减去一个整数的方法压缩存储。</li><li>4 监管链中有监管合约，合约中有一个监管函数，当调用监管函数之后，会像监管客户端发出一个rpc请求，监管客户端收到监管请求后，通过调用嵌入被监管链的监管合约从账本中取出LP计算结果和计算所用参数的id，接着利用id去账本中溯源到原本计算的数据，然后将整体数据打包后返回给监管链</li><li>5 监管链的合约收到数据之后，进行校验运算：1 验证A <em> x == b； 2  验证c </em> x == b * y；之后将校验结果以{timeStamp:result}的形式写入监管链账本，如果发现计算结果不正确，监管合约则会通知监管客户端</li><li>6 其实整体提出的是一个跨链监管框架，通过在被监管链方植入监管客户端和合约，然后通过在监管客户端中嵌入rpc服务器的方式实现跨链</li></ul><p>新版本架构图：</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_148a477ae114825cfd8ad65f02f8249d.png" alt=""></p><p>可以进行的对比实验：</p><ul><li>监管客户端使用{timeStamp:data}备份计算数据与不备份数据直接遍历查找的对比</li><li>两种模式：监管链主动索取数据与被监管链主动调用监管链的校验合约的优缺点以及效率</li></ul><h2 id="2021-11-17方案"><a href="#2021-11-17方案" class="headerlink" title="2021.11.17方案"></a>2021.11.17方案</h2><p>结果可验证的轻量级联盟链跨链框架<br>应该是提出一个框架性的东西，其中LP计算是一个例子或者部分。提出的应该是一种结果可验证的跨链机制。我觉得可以叫基于中继结点（公证人）的可验证跨链机制。</p><p><img src="https://hackmd.summershrimp.com/uploads/upload_0cdec859310efbf60ca9f2c1241a05cb.png" alt=""></p><p>其中中继结点包含一个分布式kv数据库etcd和消息队列构成，同时具有RPC的功能，任何想要接入跨链框架的链第一步都是需要到中继结点中注册自己的身份信息，etcd需要存储的信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">K：链的ID</span><br><span class="line">V：&#123;链的名称，链的跨链路由ip地址，链的公钥，链的身份（监管者与被监管者）&#125;</span><br></pre></td></tr></table></figure><p>而链与链之间的通信都需要经过中继结点，所有的通信记录都会按照时间顺序存在中继节点的消息队列中，跨链路由是由接入链的SDK+RPC结点构成，同时也具有消息队列，可以存储发来的跨链调用请求，这样既实现了对接入链的信息的访问，又实现了链与链之间的互联互通。这些都是和目前现有的一些跨链框架设计理念差不多，但是中继结点更加轻量级和高效，设计思想类似于目前后端中的微服务的架构与模式。</p><p>具体的监管过程如下，以LP为例：</p><ul><li>1 被监管链中由数据生成的合约将数据写入账本，格式为{id:data}，其中id是自增的唯一标识符</li><li>2 当被监管链需要计算时，会按照id从小到大的顺序，以此取出数据，用来构建出解决LP问题所需要的A，c，b，然后进求解，如果有最优值，那么则接着计算对偶问题，最终把原问题的解x和对偶问题的解y，以{timeStamp:[x,y]}的格式写入账本之中，其中x和y是含有多个0的向量，可以将x和y组成一个稀疏矩阵后压缩存储，减少存储和通信上的开销</li><li>3 在计算完成之后，会将计算的参数A,c,b数据以{timeStamp(和上面的timeStamp是同一个值):[Id(A),Id(c ),Id(b)]}的格式写入账本之中做溯源用，由于A,c，b都是大小比较相近的index，可以用整体加上或者减去一个整数的方法压缩存储。</li><li>4 监管链中有监管合约，合约中有一个监管函数，当调用监管函数之后，监管函数会把监管请求发送到跨链路由，跨链路由接着会构建一个监管请求：{监管链ID，被监管链的id，监管的计算类型}，同时用自己保存在跨链路由中的私钥对消息使用RSA算法签名，把签名附加在消息中，接着消息将传递到中继结点中。</li><li>5 中继结点收到跨链路由的消息之后，会将消息发送至被监管链的跨链路由中，被监管链的跨链路由会向中继结点申请监管链的公钥，用来验证消息的合法性，同时会向中继结点索要监管链的id所对应的身份信息，判断是否为监管者，通过校验之后才会进行下面的操作。</li><li>6 被监管链跨链路由通过调用嵌入被监管链的监管合约从账本中取出LP计算结果和计算所用参数的id，接着利用id去账本中溯源到原本计算的数据，然后将整体数据打包后返回给监管链，同时会用自己的私钥将消息签名发送到中继结点中,消息格式{被监管链ID，监管链ID，Proof字段（根据不同的计算类型有不同的数据，在LP中是A,b,c,X,Y）}。</li><li>7 监管链在收到数据之后，向中继结点索取被监管链的公钥之后验证消息的合法性，进行校验运算：1 验证A <em> x == b； 2  验证c </em> x == b * y；之后将校验结果以{timeStamp:result}的形式写入监管链账本，如果发现计算结果不正确，监管合约则会通知监管客户端</li></ul><p>可对比的方案：</p><ul><li>异构能源区块链的多能互补安全交易模型</li><li>适用于异构联盟链底层平台的跨链模型</li><li>wecross</li><li>这两天即将发布的陆羽跨链模型</li></ul><p>创新点：</p><ul><li>使用了中继结点的方式，中继结点保存所有消息记录（可以划分为公证人跨链机制）</li><li>往常跨链中各个链身份都是平等的，我们引入了监管与被监管者的概念</li><li>设计了一系列的消息协议，用来确保跨链过程中的安全</li><li>设计的协议中跨链结果中带有proof字段，用来验证跨链结果的正确性]</li></ul><h2 id="方案简介"><a href="#方案简介" class="headerlink" title="方案简介"></a>方案简介</h2><p>在目前设计的系统中，信息巡查和数据处理结果的正确性，主要是指判断合约计算的结果是否正确，以税务系统的联盟链为例，一些税额的计算都是在智能合约中完成，因此我们需要去监管和验证智能合约计算结果的正确性，针对不同类型的运算有不同的验证机制，以线性规划问题为例，我们通过对偶问题去验证原问题是否计算正确，通过跨链技术和可验证计算技术相结合，实现跨链监管结果可溯源和不可篡改。<br>目前已经设计了一套轻量级的基于中继结点联盟链跨链监管框架，严格意义上可以划分于公证人跨链机制。中继节点由分布式KV数据库和消息队列组成，同时具有发起和接受RPC请求的功能，任何想要接入跨链监管框架的链第一步都是需要到中继结点中注册自己的身份信息，其中关键的身份信息有：1 自己的身份，该链在跨链系统中属于监管者还是被监管者；2 该链的公钥，私钥由区块链本身保存，公钥和私钥用于在进行跨链通信中确定和验证身份；3 该链的跨链路由的RPC地址，用于与结点之间进行互相通信。<br>联盟链向中继节点注册身份信息之后，需要接入特定的跨链路由，之后通过跨链路由，和设计的一套跨链监管消息通信协议，就可以实现监管链与被监管链之间的跨链通信和合约调用。</p><h2 id="本方法优点"><a href="#本方法优点" class="headerlink" title="本方法优点"></a>本方法优点</h2><p>1 使用了中继结点的方式，中继结点保存所有消息记录，因此所有跨链操作都是可以溯源和查询的.<br>2 相比较于中继链的跨链机制，中继链需要将跨链操作信息经过共识打包进交易，而中继结点相对来说处理交易的速度更快，并且通过消息队列的方式也可以实现交易信息全流程的存储。<br>3 相较于传统的联盟链跨链框架，我们的框架有了明确的身份划分，每一条接入的链必须是监管者或者被监管者，这样严格的身份控制可以确保整个跨链监管的安全性。<br>4 设计的消息通信协议中，我们加入了proof字段，通过proof字段携带的信息可以对不同类型的计算进行计算结果正确性的校验。</p><h2 id="场景变更"><a href="#场景变更" class="headerlink" title="场景变更"></a>场景变更</h2><p>一共有三条链，被监管链，中继链，监管链</p><p>被监管链进行LP计算，但是计算结果可能不正确，或者在将计算结果写入数据接收链的时候不正确（返回fake value给接收链），因此需要使用监管链进行监管。</p><p>角色增加为三个，1 被监管链 2 中继链 3 监管链<br>等于说把中继结点改成了中继链，注册，身份校验等不变，只是写在kv数据库中改成了写入身份信息合约中。<br>监管步骤：</p><ul><li>1 被监管链写入数据并且进行LP计算</li><li>2 被监管链定时将计算结果和Proof一定参数发送至接收链（根据不同的计算有不同的参数和结果，以LP为例，参数是数据的id，结果就是计算结果）</li><li>3 监管链想要进行监管时，首先需要向中继链提出监管请求，并且使用中继链的私钥对请求进行签名，接着中继链会把计算用到参数的id给监管链，监管链带着签名后的请求，可以去被监管链中取出data，和对偶问题的解</li><li>4 监管链会嵌入一个监管合约，监管合约会实时的计算原本LP问题的对偶问题，并且把</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;链上计算结果正确性&quot;&gt;&lt;a href=&quot;#链上计算结果正确性&quot; class=&quot;headerlink&quot; title=&quot;链上计算结果正确性&quot;&gt;&lt;/a&gt;链上计算结果正确性&lt;/h1&gt;&lt;p&gt;主要解决的问题是验证链上计算结果的真实性，由于联盟链本身没有PoW和PoS之类的共识算法，因此可以使用以太坊之类的公链（结点多，共识算法可靠）的智能合约去监管联盟链上合约的计算结果。&lt;br&gt;
    
    </summary>
    
    
      <category term="跨链" scheme="https://dispa1r.github.io/tags/%E8%B7%A8%E9%93%BE/"/>
    
      <category term="fabric" scheme="https://dispa1r.github.io/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>重生</title>
    <link href="https://dispa1r.github.io/2022/05/04/index/"/>
    <id>https://dispa1r.github.io/2022/05/04/index/</id>
    <published>2022-05-04T09:40:05.000Z</published>
    <updated>2022-05-04T11:02:21.314Z</updated>
    
    <content type="html"><![CDATA[<p>在web3的世界里大展身手吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在web3的世界里大展身手吧！&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="废话" scheme="https://dispa1r.github.io/tags/%E5%BA%9F%E8%AF%9D/"/>
    
  </entry>
  
</feed>
